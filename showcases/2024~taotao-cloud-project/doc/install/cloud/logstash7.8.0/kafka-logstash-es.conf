input {
  kafka{
     bootstrap_servers => ["172.168.50.41:9092,172.168.50.41:9097,172.168.50.41:9098"]  # kafka节点的IP+端口号
     topics => ["topic_biz_data"]   #
     #topics => "%{[@metadata][topic]}"     # 使用kafka传过来的topic
     #topics_pattern => "topic_.*"          # 使用正则匹配topic
     codec => "json"                        # 数据格式!!!,重要
     sasl_mechanism => "PLAIN"
     security_protocol => "SASL_PLAINTEXT"
     #consumer_threads => 2                  # 消费线程数量
     #decorate_events => true                # 可向事件添加Kafka元数据，比如主题、消息大小的选项，这将向logstash事件中添加一个名为kafka的字段，
     #auto_offset_reset => "latest"          # 自动重置偏移量到最新的偏移量
     #auto_commit_interval_ms => "1000"
     sasl_jaas_config => "org.apache.kafka.common.security.scram.ScramLoginModule required username='xxx' password='xxx';"
     group_id => "group_biz_data"         # 消费组ID，多个有相同group_id的logstash实例为一个消费组
  }

  kafka{
     bootstrap_servers => ["172.168.50.41:9092,172.168.50.41:9097,172.168.50.41:9098"]  # kafka节点的IP+端口号
     topics => ["topic_biz_data"]   #
     #topics => "%{[@metadata][topic]}"     # 使用kafka传过来的topic
     #topics_pattern => "topic_.*"          # 使用正则匹配topic
     codec => "json"                        # 数据格式!!!,重要
     sasl_mechanism => "PLAIN"
     security_protocol => "SASL_PLAINTEXT"
     #consumer_threads => 2                  # 消费线程数量
     #decorate_events => true                # 可向事件添加Kafka元数据，比如主题、消息大小的选项，这将向logstash事件中添加一个名为kafka的字段，
     #auto_offset_reset => "latest"          # 自动重置偏移量到最新的偏移量
     #auto_commit_interval_ms => "1000"
     sasl_jaas_config => "org.apache.kafka.common.security.scram.ScramLoginModule required username='xxx' password='xxx';"
     group_id => "group_biz_data"         # 消费组ID，多个有相同group_id的logstash实例为一个消费组
  }
}

#input {
#    file {
#        path => "/usr/share/tomcat/logs/*.log"
#        start_position => beginning
#    }
#}

filter {

}

output {									# output 数据输出配置
  elasticsearch {							# 使用elasticsearch接收
    hosts => ["http://192.168.10.220:9200"]		# 集群地址 多个用,隔开
  }
#  stdout {
#  	codec => rubydebug						# 输出到命令窗口
#  }
}
