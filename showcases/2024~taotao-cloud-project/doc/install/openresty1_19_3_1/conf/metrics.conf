lua_shared_dict prometheus_metrics 10M;

init_by_lua_block {
  prometheus = require("prometheus").init("prometheus_metrics")

  http_request_endpoint = prometheus:counter(
      "nginx_http_requests_endpoint", "Number of HTTP requests_endpoint", {"host", "port", "endpoint", "status"})

  http_request_time = prometheus:histogram(
      "nginx_http_requests_time", "Number of HTTP requests_time", {"host", "port", "endpoint", "status"})

  http_connections = prometheus:gauge(
      "nginx_http_connections", "Number of HTTP connections", {"state"})

  http_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})

  http_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
}

init_worker_by_lua "prometheus:init_worker()";

log_by_lua_block {
    local host = ngx.var.host
    local endpoint = ngx.var.uri
    local status = ngx.var.status
    local port = ngx.var.server_port

    if string.find(endpoint, 'static') ~= nil or
       string.find(endpoint, '.js') ~= nil or
       string.find(endpoint, '.css') ~= nil or
       string.find(endpoint, '.jpg') ~= nil or
       string.find(endpoint, '.html') ~= nil or
       string.find(endpoint, '.icon') ~= nil
    then
       endpoint = "static"
       status = "static"
    else
       endpoint = ngx.var.uri
    end

    if endpoint ~= nil then
	    http_request_endpoint:inc(1, {host, port ,endpoint, status})
    end

    local request_time = ngx.var.request_time

    if endpoint ~= nil and request_time ~= nil then
        http_request_time:observe(tonumber(request_time), {host, port ,endpoint, status})
    end

    http_requests:inc(1, {ngx.var.server_name, ngx.var.status})
    http_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
}

server {
  listen 9527;

#   allow 192.168.0.0/16;
#   deny all;

  location /metrics {
    content_by_lua_block {
      if ngx.var.connections_active ~= nil then
         http_connections:set(ngx.var.connections_active, {"active"})
        http_connections:set(ngx.var.connections_reading, {"reading"})
         http_connections:set(ngx.var.connections_waiting, {"waiting"})
         http_connections:set(ngx.var.connections_writing, {"writing"})
      end

      prometheus:collect()
    }
  }
}
