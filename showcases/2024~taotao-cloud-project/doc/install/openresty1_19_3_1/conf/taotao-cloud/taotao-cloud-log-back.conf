# nginx.vh.default.conf  --  docker-openresty
#
# This file is installed to:
#   `/etc/nginx/conf.d/default.conf`
#
# It tracks the `server` section of the upstream OpenResty's `nginx.conf`.
#
# This config (and any other configs in `etc/nginx/conf.d/`) is loaded by
# default by the `include` directive in `/usr/local/openresty/nginx/conf/nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

lua_shared_dict ngx_cache 56m;
lua_shared_dict cache_lock 100k;

server {
    listen 443 ssl;
    server_name log.taotaocloud.top;

    ssl_certificate /opt/openresty/cert/log.taotaocloud.top.crt;
    ssl_certificate_key /opt/openresty/cert/log.taotaocloud.top.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
    ssl_prefer_server_ciphers on;

    charset utf-8;

    error_log logs/log/taotao-cloud-log.error.log  error;
    access_log logs/log/taotao-cloud-log.access.log  main;
    access_log weblog/taotao-cloud-log.access.log taotao-cloud-access-log;

    location /sa.gif {
      set $cad '';

      lua_code_cache on;
      charset utf-8;
      default_type 'application/json';
      set_by_lua $KAFKA_SERVERS 'return os.getenv("KAFKA_SERVERS")';

      content_by_lua_block{
        local producer = require("resty.kafka.producer")
        local client = require("resty.kafka.client")
        local cjson = require("cjson.safe")

        local kafka_servers = ngx.var.KAFKA_SERVERS

        -- 此处可以用kafka_servers 目前写死
        local broker_list = {
            { host = 'host', port = 9092 },
        }

        local error_handle = function(topic, partition_id, queue, index, error, retryable)
            ngx.log(ngx.ERR, 'failed sentd to kafka' .. error)
        end

        local producer_config = {
            request_timeout = 60000,
            socket_timeout = 60000,
            producer_type = 'async',
            flush_time = 1000,
            batch_num = 5,
            max_buffering = 10000,
            error_handle = error_handle
        }

        local args = ngx.req.get_uri_args()
        local data = args["data"]
        if data == nil then
            ngx.say('{"code:": 500, "msg": "data error"}')
        end

        --local escape_data = ngx.var.arg_data
        --local data = ngx.unescape_uri(escape_data)

        local data_json_str = ngx.decode_base64(data)
        local data_json = cjson.decode(data_json_str)

        if ngx.var.http_x_forwarded_for == nil then
            data_json["ip"] = ngx.var.remote_addr
        else
            data_json["ip"] = ngx.var.http_x_forwarded_for
        end

        local lib_json = data_json["lib"]


        local lib = lib_json["$lib"]

        local source = 'access-log'
        if(lib == 'js') then
             source = 'access-log-taotao-cloud-web-log'
        elseif(lib == 'MiniProgram') then
             source = 'access-log-taotao-cloud-mini-log'
        elseif(lib == 'ios') then
             source = 'access-log-taotao-cloud-ios-log'
        elseif(lib == 'android') then
             source = 'access-log-taotao-cloud-android-log'
        end
        meta_data["source"] = source

        local current_time = ngx.now() * 1000
        meta_data["ctime"] = current_time

        local meta = cjson.encode(meta_data)
        local msg = ngx.encode_base64(meta) .. "-" .. data

        ngx.var.cad = msg

        local bp = producer:new(broker_list, producer_config)
        local offset, err = bp:send(source, tostring(current_time), msg)
        if not offset then
            ngx.log(ngx.ERR, 'kafka send error:', err)
            ngx.say('{"code:": 500, "msg": failed"}')
        end
        ngx.say('{"code:": 200, "msg": "success"}')
      }

      # 此处也可以用外部lua脚本
      # content_by_lua_file "/opt/openresty/config/taotao-bigdata/lua/collect_kafka.lua";
    }
}
