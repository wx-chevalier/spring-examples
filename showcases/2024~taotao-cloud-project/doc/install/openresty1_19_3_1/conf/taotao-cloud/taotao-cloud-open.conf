server {
      listen 443 ssl;
      server_name open.taotaocloud.top;

      ssl_certificate /opt/openresty/cert/scs1644914860954_open.taotaocloud.top_server.crt;
      ssl_certificate_key /opt/openresty/cert/scs1644914860954_open.taotaocloud.top_server.key;
      ssl_session_timeout 5m;
      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
      ssl_prefer_server_ciphers on;

      access_log logs/open/taotao-cloud-open.access.log main;
      error_log  logs/open/taotao-cloud-open.error.log  error;

      # 开启gzip
      gzip  on;
      # 对于静态文件的处理模块 开启后会寻找.gz结尾的文件 直接返回不会占用cpu进行压缩 如果找不到则不压缩
      gzip_static on;
      # 设置压缩的缓冲区大小 以8k为单位 如果文件为15k 则申请 16*8k 的缓冲区
      gzip_buffers 16 8k;
      # 压缩起点 大于1k才进行压缩
      gzip_min_length 1k;
      # 压缩级别 1-9 越大越好 也越占用cpu时间
      gzip_comp_level 8;
      # 如果nginx中使用了多层代理 必须设置这个才可以开启gzip 设置gizp针对的http协议版本
      gzip_http_version 1.1;
      # 进行压缩文件的类型
      gzip_types application/javascript text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
      # 不使用gzip IE6
      gzip_disable "MSIE [1-6]\.";
      gzip_proxied any;
      # 是否在http header中添加Vary: Accept-Encoding，建议开启
      gzip_vary on;

      # 开启 brotli压缩
      # 需要安装对应的nginx模块,具体安装方式可以自行查询
      # 可以与gzip共存不会冲突
      brotli on;
      brotli_comp_level 6;
      brotli_buffers 16 8k;
      brotli_min_length 20;
      brotli_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;

      location / {
          # 不缓存html，防止程序更新后缓存继续生效
          if ($request_filename ~* .*\.(?:htm|html)$) {
            add_header Cache-Control "private, no-store, no-cache, must-revalidate, proxy-revalidate";
          }

          root   business/taotao-cloud-open;
          index  index.html index.htm;

	        expires off;
	        etag off;
	        if_modified_since off;

	        add_header Cache-Control no-store;

    	    set $fallback_file /index.html;
          if ($http_accept !~ text/html) {
              set $fallback_file /null;
          }
          if ($uri ~ /$) {
              set $fallback_file $uri;
          }
          try_files $uri $fallback_file;
      }
  }
