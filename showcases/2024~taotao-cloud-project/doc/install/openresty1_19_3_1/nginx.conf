########### 每个指令必须有分号结束。#################
# 全局块  比如工作进程数，定义日志路径；
#配置用户或者组，默认为nobody nobody。
#user  nobody;
#user administrator administrators;

#允许生成的进程数，默认为1,一般建议设成CPU核数1-2倍
worker_processes 1;
#worker_processes  8;


#指定nginx进程运行文件存放地址
#pid /nginx/pid/nginx.pid;

#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别依次为：#debug|info|notice|warn|error|crit|alert|emerg
error_log logs/error.log error;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#Events块 设置处理轮询事件模型，每个工作进程最大连接数及http层的keep-alive超时时间；
events {
   	#使用epoll的I/O 模型处理轮询事件。
   	#可以不设置，nginx会根据操作系统选择合适的模型
   	#事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
   	#use epoll;
   	#工作进程的最大连接数量, 默认1024个
   	worker_connections  2048;

    #设置网路连接序列化，防止惊群现象发生，默认为on
    accept_mutex on;
    #设置一个进程是否同时接受多个网络连接，默认为off
    multi_accept on;
}

# http块 路由匹配、静态文件服务器、反向代理、负载均衡等
http {
 	# 导入文件扩展名与文件类型映射表 mime.types
    include       mime.types;
    #默认文件类型，默认为text/plain
    default_type  application/octet-stream;
    #取消服务日志
    #access_log off;
    #日志格式及access日志路径 自定义格式
    log_format myFormat '$time_local 客户端地址:$remote_addr–$remote_port 请求的URI和HTTP协议:$request 请求地址:$http_host HTTP请求状态:$status upstream状态:$upstream_status 负载地址:$upstream_addr url跳转来源:$http_referer $upstream_addr $body_bytes_sent $http_user_agent';
    #combined为日志格式的默认值
    access_log logs/access.log myFormat;
    #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。
    sendfile on;
    #sendfile开启时才开启。
    tcp_nopush   on;
	server_names_hash_bucket_size 64;
    #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
    sendfile_max_chunk 100k;
    #连接超时时间，默认为75s，可以在http，server，location块。
    keepalive_timeout 65;

    #--------------------静态文件压缩-----------------------------#
    #Nginx可以对网站的css、js 、xml、html 文件在传输前进行压缩，大幅提高页面加载速度。经过Gzip压缩后页面大小可以变为原来的30%甚至更小。使用时仅需开启Gzip压缩功能即可。你可以在http全局块或server块增加这个配置。
    # 开启gzip压缩功能
    #gzip  on;
    gzip on;

    # 设置允许压缩的页面最小字节数; 这里表示如果文件小于10k，压缩没有意义.
    gzip_min_length 10k;

    # 设置压缩比率，最小为1，处理速度快，传输速度慢；
    # 9为最大压缩比，处理速度慢，传输速度快; 推荐6
    gzip_comp_level 6;

    # 设置压缩缓冲区大小，此处设置为16个8K内存作为压缩结果缓冲
    gzip_buffers 16 8k;

    # 设置哪些文件需要压缩,一般文本，css和js建议压缩。图片视需要要锁。
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    #--------------------静态文件压缩-----------------------------#
	server {
		listen       80;
		server_name  localhost;
		location / {
            root   html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
    #http server块
    server {
        keepalive_requests 120; #单连接请求上限次数。
        listen       8081;   #监听端口
        server_name  域名 #监听地址
        #ssi on;
		#autoindex on;
        charset utf-8;
        client_max_body_size 10M; # 限制用户上传文件大小，默认1M
        #access_log  logs/host.access.log  myFormat; #定义访问日志，可以针对每一个server（即每一个站点）设置它们自己的访问日志。

        # 转发动态请求到web应用服务器
        #location ^~ /api {
            #rewrite ^/api/(.*)$ /$1 break;
            #proxy_pass https://stream;
            #break;#终止匹配
        #}
		location / {
           # 使用proxy_pass转发请求到通过upstream定义的一组应用服务器
			proxy_pass      http://stream ;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
			proxy_redirect off;
			proxy_set_header X-Real-IP  $remote_addr;
        }
		location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。
			proxy_pass  	http://stream ;  #请求转向stream 定义的服务器列表
        }

        #location / {
            #autoindex on;
            #try_files $uri $uri/ /index.html?$args;
        #}

        # 规则1：通用匹配
        #location / {
			#ssi on;
			#autoindex on;                 #自动显示目录
            #autoindex_exact_size off;     #人性化方式显示文件大小否则以byte显示
            #autoindex_localtime on;       #按服务器时间显示，否则以gmt时间显示
            #root   /root;                 #定义服务器的默认网站根目录位置
            #index index.html index.htm;   #定义首页索引文件的名称  设置默认页
            # 使用proxy_pass转发请求到通过upstream定义的一组应用服务器
            #proxy_pass   http://mysvr;      #负载配置
            #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            #proxy_set_header Host $http_host;
            #proxy_redirect off;
            #proxy_set_header X-Real-IP  $remote_addr;
            #deny ip;  # 拒绝的ip
            #allow ip; # 允许的ip
        #}

        # 规则2：处理以/static/开头的url
        location ^~ /static {
            alias /usr/share/nginx/html/static; # 静态资源路径
        }
        #= 精确匹配 1
        #^~ 以某个字符串开头 2
        #~ 区分大小写的正则匹配 3
        #~* 不区分大小写的正则匹配 4
        #!~ 区分大小写的不匹配正则 5
        #!~* 不区分大小写的不匹配正则 6
        #/ 通用匹配，任何请求都会匹配到 7
        #location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。
            #root path;  #根目录
            #index vv.txt;  #设置默认页
			#proxy_pass  http://stream;  #请求转向stream 定义的服务器列表
            #deny 127.0.0.1;  #拒绝的ip
            #allow ip; #允许的ip
        #}
        #-----------------------------静态文件缓存--------------------#
        #缓存可以加快下次静态文件加载速度。我们很多与网站样式相关的文件比如css和js文件一般不怎么变化，缓存有效器可以通过expires选项设置得长一些。
        # 使用expires选项开启静态文件缓存，10天有效
        location ~ ^/(images|javascript|js|css|flash|media|static)/  {
             root    /var/www/big.server.com/static_files;
            expires 10d;
        }
		#-----------------------------静态文件缓存--------------------#
        # 错误页面
		error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    #-------------$符号的全局变量含义--------------#
    #$args, 请求中的参数;
    #$content_length, HTTP请求信息里的"Content-Length";
    #$content_type, 请求信息里的"Content-Type";
    #$document_root, 针对当前请求的根路径设置值;
    #$document_uri, 与$uri相同;
    #$host, 请求信息中的"Host"，如果请求中没有Host行，则等于设置的服务器名;
    #$limit_rate, 对连接速率的限制;
    #$request_method, 请求的方法，比如"GET"、"POST"等;
    #$remote_addr, 客户端地址;
    #$remote_port, 客户端端口号;
    #$remote_user, 客户端用户名，认证用;
    #$request_filename, 当前请求的文件路径名
    #$request_body_file,当前请求的文件
    #$request_uri, 请求的URI，带查询字符串;
    #$query_string, 与$args相同;
    #$scheme, 所用的协议，比如http或者是https，比如rewrite ^(.+)$
    #$scheme://example.com$1 redirect;
    #$server_protocol, 请求的协议版本，"HTTP/1.0"或"HTTP/1.1";
    #$server_addr, 服务器地址;
    #$server_name, 请求到达的服务器名;
    #$server_port, 请求到达的服务器端口号;
    #$uri, 请求的URI，可能和最初的值有不同，比如经过重定向之类的。
    #-------------$符号的全局变量含义--------------#


    #错误页面
    #error_page 404 https://www.baidu.com; #错误页
    #error_page 404 500 502 503 504 403 /error.shtml;

    # 负载均衡
    upstream insurance-pre {
      #weigth参数表示权值，权值越高被分配到的几率越大
      #--------------------负载均衡方式------------------#
      #1.轮询(默认)
      #2.权重，weight越大，承担任务越多
      #server ip:port weight=5
      #3.ip_hash
      #ip_hash;
      #4.url_hash
      #hash $request_uri;
      #5. fair(第三方)--按后端服务器的响应时间来分配请求，响应时间短的优先分配。使用这个算法需要安装nginx-upstream-fair这个库。
      #fair;
      #--------------------负载均衡方式------------------#
      server ip:port   weight=5; # weight越高，权重越大
      server ip:port weight=1;
      server ip:port  weight=1;
      server ip:port backup; # 热备
    }
	# 转发动态请求
    #server {
        #listen 80;
        #server_name  localhost;
        #client_max_body_size 1024M;
        #location / {
            #proxy_pass http://localhost:8080;
            #proxy_set_header Host $host:$server_port;
        #}
    #}
    # http请求重定向到https请求
    #server {
        #listen 80;
        #server_name 域名;
        #return 301 https://$server_name$request_uri;
    #}
    server {
        keepalive_requests 120; #单连接请求上限次数。
        listen       80;   #监听端口
        server_name  域名 #监听地址
        #ssi on;
		#autoindex on;
        charset utf-8;
        client_max_body_size 10M; # 限制用户上传文件大小，默认1M
        #access_log  logs/host.access.log  myFormat; #定义访问日志，可以针对每一个server（即每一个站点）设置它们自己的访问日志。
        # 转发动态请求到web应用服务器
        #location ^~ /api {
            #rewrite ^/api/(.*)$ /$1 break;
            #proxy_pass https://域名;
            #break;#终止匹配
        #}
		location / {
           # 使用proxy_pass转发请求到通过upstream定义的一组应用服务器
			proxy_pass       http://tomcat_gray1;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
			proxy_redirect off;
			proxy_set_header X-Real-IP  $remote_addr;
        }
		location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。
			proxy_pass  	http://域名;  #请求转向域名 定义的服务器列表
        }
    }
    #标准预发环境
	upstream tomcat_gray1 {
		server ip;
		server 域名;
	}

	upstream tomcat_gray2 {
		server 域名;
	}
}
