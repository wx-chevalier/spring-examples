apply plugin: "org.graalvm.buildtools.native"

def projectName = project.name

graalvmNative {
    //禁用工具链检测
    //toolchainDetection = false

    //agent {
    //    defaultMode = "standard" // Default agent mode if one isn't specified using `-Pagent=mode_name`
    //    enabled = true // Enables the agent
    //    modes {
    //        // The standard agent mode generates metadata without conditions.
    //        standard {
    //        }
    //        // The conditional agent mode generates metadata with conditions.
    //        conditional {
    //            userCodeFilterPath = "path-to-filter.json" // Path to a filter file that determines classes which will be used in the metadata conditions.
    //            extraFilterPath = "path-to-another-filter.json" // Optional, extra filter used to further filter the collected metadata.
    //        }
    //        // The direct agent mode allows users to directly pass options to the agent.
    //        direct {
    //            // {output_dir} is a special string expanded by the plugin to where the agent files would usually be output.
    //            options.add("config-output-dir={output_dir}")
    //            options.add("experimental-configuration-with-origins")
    //        }
    //    }
    //    callerFilterFiles.from("filter.json")
    //    accessFilterFiles.from("filter.json")
    //    builtinCallerFilter = true
    //    builtinHeuristicFilter = true
    //    enableExperimentalPredefinedClasses = false
    //    enableExperimentalUnsafeAllocationTracing = false
    //    trackReflectionMetadata = true
    //    // Copies metadata collected from tasks into the specified directories.
    //    metadataCopy {
    //        inputTaskNames.add("test") // Tasks previously executed with the agent attached.
    //        outputDirectories.add("src/main/resources/META-INF/native-image")
    //        mergeWithExisting = true // Instead of copying, merge with existing metadata in the output directories.
    //    }
    //    /*
    //    By default, if `-Pagent` is specified, all tasks that extend JavaForkOptions are instrumented.
    //    This can be limited to only specific tasks that match this predicate.
    //     */
    //    tasksToInstrumentPredicate = t -> true
    //}

    binaries {
        //all {
        //    resources.autodetect()
        //}
        main {
            //javaLauncher = javaToolchains.launcherFor {
            //    languageVersion = JavaLanguageVersion.of(8)
            //    vendor = JvmVendorSpec.matching("GraalVM Community")
            //}

            imageName.set(projectName)
            buildArgs.add('--verbose')
            buildArgs.add('--no-fallback')

            buildArgs.add('--add-opens=java.base/java.nio=ALL-UNNAMED')
            buildArgs.add('--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED')
            buildArgs.add('--add-opens=java.base/jdk.internal.ref=ALL-UNNAMED')

            buildArgs.add('--trace-class-initialization=ch.qos.logback.classic.Logger')
            buildArgs.add('--trace-class-initialization=java.net.Inet4Address')

            buildArgs.add('--trace-object-instantiation=ch.qos.logback.core.AsyncAppenderBase$Worker')
            buildArgs.add('--trace-object-instantiation=java.net.Inet4Address')

            //buildArgs.add('--initialize-at-run-time=io.netty')
            buildArgs.add('--initialize-at-run-time=io.netty.util.NetUtil')
            //buildArgs.add('--initialize-at-run-time=java.net.Inet4Address')

            buildArgs.add('--initialize-at-build-time=org.springframework.util.unit.DataSize')
            buildArgs.add('--initialize-at-build-time=org.slf4j.LoggerFactory,ch.qos.logback')
            buildArgs.add('--initialize-at-build-time=org.slf4j.MDC')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.classic.Level')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.classic.Logger')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.util.StatusPrinter')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.status.StatusBase')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.status.InfoStatus')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.spi.AppenderAttachableImpl')
            buildArgs.add('--initialize-at-build-time=org.slf4j.LoggerFactory')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.util.Loader')
            buildArgs.add('--initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.classic.spi.ThrowableProxy')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.CoreConstants')
//            buildArgs.add('--initialize-at-build-time=io.netty.channel.DefaultFileRegion')
//            buildArgs.add('--initialize-at-build-time=io.netty.util.AbstractReferenceCounted')
            buildArgs.add('--report-unsupported-elements-at-runtime')
            buildArgs.add('--allow-incomplete-classpath')
            buildArgs.add('-H:+ReportExceptionStackTraces')
        }
    }
}

//nativeCompile {
//    buildArgs('-H:ReflectionConfigurationFiles=./reflection-config.json')
//    buildArgs('-H:ReflectionConfigurationFiles=./reflection-config.json')
//}
