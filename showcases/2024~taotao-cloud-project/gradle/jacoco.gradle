//https://docs.gradle.org/current/userguide/jacoco_plugin.html
apply plugin: 'jacoco'

jacoco {
    //https://www.eclemma.org/jacoco/
    toolVersion = "0.8.12"
    reportsDirectory = file("${project.layout.buildDirectory.asFile.get()}/code-analysis/jacocoReportDir")
}
/**
 * 添加jacoco测试覆盖率
 */
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.required = true
        csv.required = true
        html.required = true

        xml.outputLocation = file("${project.layout.buildDirectory.asFile.get()}/code-analysis/jacoco/coverage-reports/jacoco.xml")
        csv.outputLocation = file("${project.layout.buildDirectory.asFile.get()}/code-analysis/jacoco/coverage-reports/jacoco.csv")
        html.outputLocation = file("${project.layout.buildDirectory.asFile.get()}/code-analysis/jacoco/coverage-reports/html")
    }
}
tasks.check.dependsOn jacocoTestReport

//JaCoCo覆盖率计数器
//JaCoCo 包含了多种尺度的覆盖率计数器（Coverage Counters），
// 包含指令级（Instructions,C0 coverage)、
// 分支（Branches,C1 coverage）、
// 圈复杂度（Cyclomatic Complexity）、
// 行（Lines）、
// 方法（Methods）、
// 类（Classes）。
// 具体可参考JaCoCo覆盖率计数器。 https://www.cnblogs.com/ycyzharry/p/10995582.html
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }

        rule {
            enabled = false
            element = 'PACKAGE'
            includes = ['com.xxx.xxxx.*.controller',
                        'com.xxx.xxxx.*.service'
            ]
            limit {
                counter = 'BRANCH'
                minimum = 0.75
            }
            limit {
                counter = 'LINE'
                minimum = 0.75
            }
            limit {
                counter = 'METHOD'
                minimum = 0.75
            }
            limit {
                counter = 'CLASS'
                minimum = 0.100
            }
        }
    }
}

