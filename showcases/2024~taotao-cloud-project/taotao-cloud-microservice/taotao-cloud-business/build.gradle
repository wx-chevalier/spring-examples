subprojects {
    dependencies {
        testImplementation("io.github.shuigedeng:taotao-cloud-starter-test")
    }

    apply from: rootProject.file('gradle/mybatis-generator.gradle')
}

description = "业务中心"

configure(subprojects.findAll { (it.name.endsWith("-api")) }) { project ->

    apply plugin: "com.google.protobuf"

    dependencies {
        api "io.github.shuigedeng:taotao-cloud-starter-openfeign"

        compileOnly "io.github.shuigedeng:taotao-cloud-starter-office"
        compileOnly "io.seata:seata-all"
        compileOnly 'com.github.oshi:oshi-core:6.6.1'
        compileOnly "io.github.shuigedeng:taotao-cloud-starter-grpc"

        //https://search.maven.org/artifact/com.google.protobuf/protobuf-java
        api "com.google.protobuf:protobuf-java:4.27.2"
        //https://search.maven.org/artifact/com.google.protobuf/protobuf-java-util
        api "com.google.protobuf:protobuf-java-util:4.27.2"
        api "com.google.protobuf:protobuf-javalite:4.27.2"

        //  1.3.5  Java 9+ compatibility - Do NOT update to 2.0.0
        // protobuf生成的代码带有javax.annotation.Generated 此注解只有在1.3.5中有  在2版本之后换成了jakarta.annotation.Generated
        // 等之后支持了jakarta就可以用2版本了
        //api 'jakarta.annotation:jakarta.annotation-api:1.3.5'
    }

    protobuf {
        //指定protoc编译器位置 在 protoc 模块下，可以指定多个配置，但是会以最后一个配置为准。
        protoc {
            //https://repo1.maven.org/maven2/com/google/protobuf/protoc/
            //直接使用Maven Central上已经编译好的protoc编译器，
            artifact = "com.google.protobuf:protoc:4.27.2"
            //指定本地已经安装的protoc编译器
            //path = '/usr/local/bin/protoc'
        }
        //generatedFilesBaseDir = "$projectDir/src/generated"
        clean {
            delete generatedFilesBaseDir
        }
        //指定protoc运行插件
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:1.64.0"
            }
            //javalite {
            //    // The codegen for lite comes as a separate artifact
            //    artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.1'
            //}
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }

    configurations {
        all {
            //resolutionStrategy {
            //    //force "org.codehaus.groovy:groovy:4.0.0"
            //    force 'jakarta.annotation:jakarta.annotation-api:1.3.5'
            //}

            //exclude group: "javax.annotation", module: "javax.annotation-api"
            //exclude group: "javax.activation", module: "javax.activation-api"
            //exclude group: "com.google.code.findbugs", module: "jsr305"
        }
    }

    tasks.register('javaxReplaceToJakarta') {
        doLast {
            def treeFile = fileTree(
                    dir: "${project.layout.buildDirectory.asFile.get()}/generated/source/proto/main/grpc",
                    includes: ["**/*.java"])

            treeFile.each({
                File f ->
                    {
                        def text = f.text
                        text = text.replaceAll("javax", "jakarta")
                        f.write(text, "UTF-8")
                    }
            })
        }
    }

    generateProto.finalizedBy javaxReplaceToJakarta

    //// Optional
    //eclipse {
    //    classpath {
    //        file.beforeMerged { cp ->
    //            def generatedGrpcFolder = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generated/main/grpc', null);
    //            generatedGrpcFolder.entryAttributes['ignore_optional_problems'] = 'true';
    //            cp.entries.add( generatedGrpcFolder );
    //            def generatedJavaFolder = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generated/main/java', null);
    //            generatedJavaFolder.entryAttributes['ignore_optional_problems'] = 'true';
    //            cp.entries.add( generatedJavaFolder );
    //        }
    //    }
    //}
    //
    //// Optional
    //idea {
    //    module {
    //        sourceDirs += file("src/generated/main/java")
    //        sourceDirs += file("src/generated/main/grpc")
    //        generatedSourceDirs += file("src/generated/main/java")
    //        generatedSourceDirs += file("src/generated/main/grpc")
    //    }
    //}

}

tasks.register('spotlessJavaAll') {
    def subprojectList = subprojects.findAll { it.name.endsWith("-sys-biz") }

    subprojectList.forEach {subp-> {
        def tasks = subp.getTasksByName("spotlessJava", false)
        dependsOn tasks.iterator().next()
    }}

    println("spotlessJavaAll==============================")
}


