server:
  port: 33336
  shutdown: graceful
  http2:
    enabled: true
  undertow:
    buffer-size: 2048
    direct-buffers: true
    threads:
      io: 16
      worker: 256
    accesslog:
      dir: ${user.home}/logs/${spring.application.name}/undertow
      enabled: true
  servlet:
    application-display-name: ${spring.application.name}
    #context-path: sys

jasypt:
  encryptor:
    password: ${TAOTAO_CLOUD_ENCRYPTOR_PASSWORD:taotao-cloud}
    algorithm: PBEWITHHMACSHA512ANDAES_256
    property:
      prefix: "ENC@["
      suffix: "]"

redisson:
  #在Redis节点里显示的客户端名称。
  client-name: ${spring.application.name}
  #用于节点身份验证的密码
  password: taotao-cloud
  #锁的模式.如果不设置, REENTRANT(可重入锁),FAIR(公平锁),MULTIPLE(联锁),REDLOCK(红锁),READ(读锁), WRITE(写锁)
  lock-model: auto
  #集群模式:SINGLE(单例),SENTINEL(哨兵),MASTERSLAVE(主从),CLUSTER(集群),REPLICATED(云托管)
  model: single
  #Redisson的对象编码类是用于将对象进行序列化和反序列化，以实现对该对象在Redis里的读取和存储
  codec: "com.zengtengpeng.codec.MyJsonJacksonCodec"
  #这个线程池数量被所有RTopic对象监听器，RRemoteService调用者和RExecutorService任务共同共享。
  threads: 16
  #这个线程池数量是在一个Redisson实例内，被其创建的所有分布式数据类型和服务，以及底层客户端所一同共享的线程池里保存的线程数量。
  netty_threads: 32
  #TransportMode.NIO,TransportMode.EPOLL - 需要依赖里有netty-transport-native-epoll包（Linux） TransportMode.KQUEUE - 需要依赖里有 netty-transport-native-kqueue包（macOS）
  transport_mode: nio
  #如果当前连接池里的连接数量超过了最小空闲连接数，而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉。时间单位是毫秒
  idleConnectionTimeout: 1000
  #同任何节点建立连接时的等待超时。时间单位是毫秒
  connectTimeout: 1000
  #等待节点回复命令的时间。该时间从命令发送成功时开始计时。
  timeout: 3000
  #如果尝试达到 retryAttempts（命令失败重试次数） 仍然不能将命令发送至某个指定的节点时，将抛出错误。如果尝试在此限制之内发送成功，则开始启用 timeout（命令等待超时） 计时。
  retryAttempts: 3
  #在一条命令发送失败以后，等待重试发送的时间间隔。时间单位是毫秒。
  retryInterval: 1500
  #	每个连接的最大订阅数量。
  subscriptionsPerConnection: 5
  #开启SSL终端识别能力。
  sslEnableEndpointIdentification: true
  #确定采用哪种方式（JDK或OPENSSL）来实现SSL连接。
  ssl-provider: jdk
  ssl-truststore:
  ssl-truststore-password:
  ssl-keystore:
  ssl-keystore-password:
  #监控锁的看门狗超时时间单位为毫秒。该参数只适用于分布式锁的加锁请求中未明确使用leaseTimeout参数的情况。如果该看门口未使用lockWatchdogTimeout去重新调整一个分布式锁的lockWatchdogTimeout超时，那么这个锁将变为失效状态。这个参数可以用来避免由Redisson客户端节点宕机或其他原因造成死锁的情况。
  lockWatchdogTimeout: 30000
  #通过该参数来修改是否按订阅发布消息的接收顺序出来消息，如果选否将对消息实行并行处理，该参数只适用于订阅发布消息的情况。
  keepPubSubOrder: true
  pingConnectionInterval: 30000
  keepAlive: false
  tcpNoDelay: false
  referenceEnabled: true
  useScriptCache: false
  minCleanUpDelay: 5
  maxCleanUpDelay: 1800
  #等待获取锁超时时间,-1则是一直等待
  attemptTimeout: 10000
  dataValidTime: 1800000
  single_server_config:
    #服务器地址,必填ip:port
    address: "192.168.10.220:6379"
    #用于发布和订阅连接的最小保持连接数（长连接）。Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。
    subscription_connection_minimum_idle_size: 1
    #用于发布和订阅连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
    subscription_connection_pool_size: 50
    #最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
    connection_minimum_idle_size: 24
    #连接池最大容量。连接池的连接数量自动弹性伸缩。
    connection_pool_size: 64
    #尝试连接的数据库编号。
    database: 3
    #用来指定检查节点DNS变化的时间间隔。使用的时候应该确保JVM里的DNS数据的缓存时间保持在足够低的范围才有意义。用-1来禁用该功能。
    dns_monitoring_interval: 5000
  #multiple-server-config:
  #  #在多Redis服务节点的环境里，可以选用以下几种负载均衡方式选择一个节点：
  #  #org.redisson.connection.balancer.WeightedRoundRobinBalancer - 权重轮询调度算法
  #  #org.redisson.connection.balancer.RoundRobinLoadBalancer - 轮询调度算法
  #  #org.redisson.connection.balancer.RandomLoadBalancer - 随机调度算法
  #  loadBalancer: "org.redisson.connection.balancer.RoundRobinLoadBalancer"
  #  #多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时读取反映速度。
  #  slaveConnectionMinimumIdleSize: 32
  #  #多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
  #  slaveConnectionPoolSize: 64
  #  failedSlaveReconnectionInterval: 3000
  #  failedSlaveCheckInterval: 180000
  #  #多节点的环境里，每个 主节点的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
  #  masterConnectionMinimumIdleSize: 32
  #  #多主节点的环境里，每个 主节点的连接池最大容量。连接池的连接数量自动弹性伸缩。
  #  masterConnectionPoolSize: 64
  #  #设置读取操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里读取。 MASTER - 只在主服务节点里读取。 MASTER_SLAVE - 在主从服务节点里都可以读取。
  #  readMode: slave
  #  #设置订阅操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里订阅。 MASTER - 只在主服务节点里订阅。
  #  subscriptionMode: slave
  #  #用于发布和订阅连接的最小保持连接数（长连接）。Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。 redisson.multiple-server-config.subscriptionConnectionPoolSize
  #  subscriptionConnectionMinimumIdleSize: 1
  #  subscriptionConnectionPoolSize: 50
  #  #监测DNS的变化情况的时间间隔。
  #  dnsMonitoringInterval: 5000
  #  #服务器节点地址.必填
  #  #redisson.multiple-server-config.node-addresses[0]=127.0.0.1:6379
  #  #redisson.multiple-server-config.node-addresses[1]=127.0.0.1:6380
  #  #redisson.multiple-server-config.node-addresses[2]=127.0.0.1:6381
  #  nodeAddresses:
  #    - "192.168.10.220:6381"
  #    - "192.168.10.220:6382"
  #    - "192.168.10.220:6383"
  #    - "192.168.10.220:6384"
  #    - "192.168.10.220:6385"
  #    - "192.168.10.220:6386"
  #  #(哨兵模式,云托管,主从模式特有)尝试连接的数据库编号。
  #  database: 1
  #  #(哨兵模式特有)主服务器的名称是哨兵进程中用来监测主从服务切换情况的。
  #  masterName:
  #  #(集群,哨兵,云托管模特特有) 对Redis集群节点状态扫描的时间间隔。单位是毫秒。
  #  scanInterval: 1000

arthas:
  # telnetPort、httpPort为 -1 ，则不listen telnet端口，为 0 ，则随机telnet端口
  # 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。
  # ~/logs/arthas/arthas.log (用户目录下面)里可以找到具体端口日志
  telnetPort: -1
  httpPort: -1
  # 127.0.0.1只能本地访问，0.0.0.0则可网络访问，但是存在安全问题
  ip: 0.0.0.0
  agent-id: ${spring.application.name}
  app-name: ${spring.application.name}
  tunnel-server: ws://192.168.10.200:7777/ws

dubbo:
  enabled: false
  scan:
    base-packages: com.taotao.cloud.auth.biz.service.dubbo
  application:
    #当前应用名称
    name: ${spring.application.name}
    #Java字节码编译器，用于动态类的生成，可选：jdk或javassist
    compiler: javassist
    version: ${ttcVersion}
    owner: 981376577
    architecture: china
    organization: taotao-cloud
    metadata-type: local
    environment: develop
    #禁用qos同一台集群可能会有端口冲突现象
    qos-port: 20880
    qos-enable: false
    qos-accept-foreign-ip: true
    logger: slf4j
    shutwait: 3000
    dump-directory: ${user.home}/logs/${spring.application.name}/dubbo/
  registry:
    address: nacos://192.168.10.220:8848
    group: DUBBO_REGISTRY_GROUP
    cluster: CQ
    parameters:
      namespace: taotao-cloud-dubbo
      cluster-name: CQ
    timeout: 15000
    username: nacos
    password: nacos
    protocol: dubbo
    version: ${ttcVersion}
    check: false
    register: true
    weight: 10
    subscribe: true
    use-as-config-center: false
    use-as-metadata-center: false
  protocol:
    name: dubbo
    port: 20883
    ssl-enabled: false
    accesslog: ${user.home}/logs/${spring.application.name}/dubbo/access.log
    #serialization: kryo
    status: server
    payload: 83886080
    threadpool: fixed
    threadname: taotao-cloud-sys-dubbo-protocol-executor
    threads: 200
  provider:
    timeout: 3000
    version: ${ttcVersion}
    threads: 500
    group: taotao-cloud-sys-dev
    #延时注册服务（毫秒）
    #delay: 3000
    protocol: dubbo
    retries: 3
    loadbalance: shortestresponse
    async: true
    accesslog: ${user.home}/logs/${spring.application.name}/dubbo/provider.log
    owner: 981376577
    threadpool: fixed
    threadname: taotao-cloud-sys-dubbo-provider-executor
  consumer:
    check: false
    timeout: 3000
    loadbalance: shortestresponse
    version: ${ttcVersion}
    threads: 100
    retries: 3
    async: true
    connections: 200
    owner: 981376577
    actives: 10
    cluster: failover
    validation: true
    protocol: dubbo
    group: taotao-cloud-dev
  module:
    name: ${spring.application.name}
    version: ${ttcVersion}
    owner: 981376577
    organization: taotao-cloud
    background: false
    refer-async: true
    export-async: true
  monitor:
    id: ${spring.application.name}
    address: 192.168.10.220:18080
    username: admin
    password: 123456
    group: taotao-cloud-dev
    version: ${ttcVersion}
  metadata-report:
    id: ${spring.application.name}
    address: nacos://192.168.10.220:8848
    username: nacos
    password: nacos
    group: DUBBO_REGISTRY_GROUP
    parameters:
      namespace: taotao-cloud-dubbo
      cluster-name: CQ
  config-center:
    id: ${spring.application.name}
    address: nacos://192.168.10.220:8848
    username: nacos
    password: nacos
    group: DUBBO_REGISTRY_GROUP
    parameters:
      namespace: taotao-cloud-dubbo
    check: false
  metrics:
    default: true
    id: ${spring.application.name}
    port: 9091
    enable-jvm-metrics: true
    protocol: prometheus
    aggregation:
      enabled: true
      bucketNum: 100
      timeWindowSeconds: 30
    prometheus:
      exporter:
        enabled: true
        enableHttpServiceDiscovery: true
        metricsPort: 18081
        metricsPath: /test
      pushgateway:
        enabled: false

spring:
  main:
    allow-circular-references: true
    allow-bean-definition-overriding: true
    banner-mode: off
    register-shutdown-hook: true
    cloud-platform: kubernetes
    web-application-type: servlet
  application:
    name: taotao-cloud-auth
    admin:
      enabled: true
  lifecycle:
    timeout-per-shutdown-phase: 30s
  mvc:
    servlet:
      load-on-startup: 1
    format:
      date-time: yyyy-MM-dd HH:mm:ss
      date: yyyy-MM-dd
      time: HH:mm:ss
    dispatch-trace-request: true
    dispatch-options-request: true
    log-request-details: true
    log-resolved-exception: true
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2KB
      max-file-size: 200MB
      max-request-size: 215MB
  sleuth:
    enabled: true
    web:
      client:
        enabled: true
      servlet:
        enabled: true
    sampler:
      probability: 1.0
      refresh:
        enabled: true
  zipkin:
    enabled: true
    base-url: http://192.168.10.220:9411/
    discoveryClientEnabled: false
    sender:
      type: WEB
    service:
      name: ${spring.application.name}
    compression:
      enabled: true
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://192.168.10.220:13306/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      auto-commit: true
      connection-timeout: 30000
      idle-timeout: 25000
      login-timeout: 5
      validation-timeout: 3000
      max-lifetime: 50000
      read-only: false
      connection-test-query: SELECT 1
      maximum-pool-size: 15
      minimum-idle: 10
      pool-name: MyHikariCP
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
  jpa:
    database: mysql
    database-platform: mysql
    show-sql: true
    open-in-view: true
    generate-ddl: true
    hibernate:
      ddl-auto: update
      naming:
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
    properties:
      hibernate:
        format_sql: true
        hbm2ddl.auto: update
        dialect: org.hibernate.dialect.MySQL8Dialect
  redis:
    host: 192.168.10.220
    port: 6379
    #sentinel:
    #  master:
    #  nodes:
    database: 1
    password: ${TAOTAO_CLOUD_REDIS_PASSWORD:taotao-cloud}
    connect-timeout: 60000
    #cluster:
    #  nodes: 192.168.10.220:6381,192.168.10.220:6382,192.168.10.220:6383,192.168.10.220:6384,192.168.10.220:6385,192.168.10.220:6386
    #  max-redirects: 3
    client-type: lettuce
    lettuce:
      pool:
        max-active: 1500
        max-wait: 60000
        max-idle: 500
        min-idle: 100
    redisson:
      config: |
        singleServerConfig:
          # 连接空闲超时，单位：毫秒
          idleConnectionTimeout: 10000
          # 连接超时，单位：毫秒
          connectTimeout: 10000
          # 命令等待超时，单位：毫秒
          timeout: 3000
          # 命令失败重试次数,如果尝试达到 retryAttempts（命令失败重试次数） 仍然不能将命令发送至某个指定的节点时，将抛出错误。
          # 如果尝试在此限制之内发送成功，则开始启用 timeout（命令等待超时） 计时。
          retryAttempts: 3
          # 命令重试发送时间间隔，单位：毫秒
          retryInterval: 1500
          # 密码，没有设置密码时，需要注释掉，否则会报错
          password: taotao-cloud
          # 单个连接最大订阅数量
          subscriptionsPerConnection: 5
          # 客户端名称
          clientName: "taotao-cloud-redis-client"
          # 节点地址
          address: "redis://192.168.10.220:6379"
          # 发布和订阅连接的最小空闲连接数
          subscriptionConnectionMinimumIdleSize: 1
          # 发布和订阅连接池大小
          subscriptionConnectionPoolSize: 50
          # 最小空闲连接数
          connectionMinimumIdleSize: 32
          # 连接池大小
          connectionPoolSize: 64
          # 数据库编号
          database: 1
          # DNS监测时间间隔，单位：毫秒
          dnsMonitoringInterval: 5000
        # 线程池数量,默认值: 当前处理核数量 * 2
        threads: 0
        # Netty线程池数量,默认值: 当前处理核数量 * 2
        nettyThreads: 0
        # 编码
        codec: !<org.redisson.codec.JsonJacksonCodec> {}
        # 传输模式
        transportMode : "NIO"
        # 配置看门狗的默认超时时间为30s，这里改为 10s
        lockWatchdogTimeout: 10000
  kafka:
    enabled: true
    bootstrap-servers: 192.168.10.220:9092
    producer:
      retries: 1
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: 0
      compression-type: gzip
      properties:
        linger.ms: 100
        partitioner.class: org.apache.kafka.clients.producer.RoundRobinPartitioner
    consumer:
      auto-commit-interval: 1S
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      concurrency: 5
      ack-mode: manual_immediate
      missing-topics-fatal: false
  cloud:
    compatibility-verifier:
      enabled: false
    loadbalancer:
      enabled: true

taotao:
  cloud:
    data:
      p6spy:
        enabled: true
        dateformat: yyyy-MM-dd HH:mm:ss
        driverlist: com.mysql.cj.jdbc.Driver
        database-dialect-date-format: yyyy-MM-dd HH:mm:ss
        appender: com.taotao.cloud.data.p6spy.logger.KafkaLogger
        logfile: ${user.home}/logs/${spring.application.name}/p6spy/p6spy.log
        remoteServiceName: p6spy-${spring.application.name}
      jpa:
        enabled: true
        packages: com.taotao.cloud.auth.biz.models
        tenant:
          enabled: false
    logger:
      enabled: true
    mq:
      kafka:
        enabled: true
    feign:
      enabled: true
      loadbalancer:
        enabled: true
    cache:
      redis:
        enabled: true
        cache-manager:
          enabled: true
          type: redis
    alibaba:
      nacos:
        enabled: true
      sentinel:
        enabled: true
    core:
      enabled: true
    dubbo:
      enabled: true
    springdoc:
      enabled: true
      group: ${spring.application.name}
      version: ${ttcVersion}
      title: 认证中心模块
      packages-to-scan:
        - com.taotao.cloud.auth.biz.controller

feign:
  sentinel:
    enabled: true
  okhttp:
    enabled: true
  httpclient:
    enabled: false
    max-connections: 1000
    max-connections-per-route: 100
  client:
    config:
      feignName:
        connectTimeout: 30000
        readTimeout: 30000
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
    env:
      post:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
  health:
    mail:
      enabled: false
    elasticsearch:
      enabled: false

logging:
  level:
    root: INFO
    org.springframework.web: off
    org.springframework.security: info
    org.springframework.security.oauth2: info
    org.springframework.boot.autoconfigure: off



# Sa-Token配置
sa-token:
  # token名称 (同时也是cookie名称)
  token-name: satoken
  # token前缀
  token-prefix: Bearer
  # token有效期，单位秒，-1代表永不过期
  timeout: 2592000
  # token临时有效期 (指定时间内无操作就视为token过期)，单位秒
  activity-timeout: -1
  # 是否允许同一账号并发登录 (为false时新登录挤掉旧登录)
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个token (为false时每次登录新建一个token)
  is-share: false
  # token风格
  token-style: uuid
  # 是否输出操作日志
  is-log: false
  # 是否从cookie中读取token
  is-read-cookie: false
  # 是否从head中读取token
  is-read-head: true
  # 配置Sa-Token单独使用的Redis连接
  # jwt秘钥
  jwt-secret-key: asdasdasifhueuiwyurfewbfjsdafjk
  alone-redis:
    # Redis数据库索引（默认为0）
    database: 2
    # Redis服务器地址
    host: 127.0.0.1
    # Redis服务器连接端口
    port: 6379
    # Redis服务器连接密码（默认为空）
    # password:
    # 连接超时时间（毫秒）
    timeout: 10s
    lettuce:
      pool:
        # 连接池最大连接数
        max-active: 200
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
        # 连接池中的最大空闲连接
        max-idle: 10
        # 连接池中的最小空闲连接
        min-idle: 0
          # ------- SSO-模式一相关配置  (非模式一不需要配置)
        # cookie:
        # 配置 Cookie 作用域
        # domain: stp.com

    # ------- SSO-模式二相关配置
    sso:
      # Ticket有效期 (单位: 秒)，默认五分钟
      ticket-timeout: 300
      # 所有允许的授权回调地址
      allow-url: "*"
      # 是否打开单点注销功能
      is-slo: true

      # ------- SSO-模式三相关配置 （下面的配置在SSO模式三并且 is-slo=true 时打开）
      # 是否打开模式三
      isHttp: true
      # 接口调用秘钥（用于SSO模式三的单点注销功能）
      secretkey: kQwIOrYvnXmSDkwEiFngrKidMcdrgKor
      # ---- 除了以上配置项，你还需要为 Sa-Token 配置http请求处理器（文档有步骤说明）

  # OAuth2.0 配置
  oauth2:
    is-code: true
    is-implicit: true
    is-password: true
    is-client: true

justauth:
  enabled: true
  type:
    QQ:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/qq/callback
      union-id: false
      #scopes:
      #  - get_user_info
      #  - xxxx
    WEIBO:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/weibo/callback
    GITEE:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/gitee/callback
    DINGTALK:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/dingtalk/callback
    BAIDU:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/baidu/callback
    CSDN:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/csdn/callback
    CODING:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/coding/callback
      domain-prefix: xx
    OSCHINA:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/oschina/callback
    ALIPAY:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/alipay/callback
      alipay-public-key: MIIB**************DAQAB
    WECHAT_OPEN:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/wechat_open/callback
    WECHAT_MP:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/wechat_mp/callback
    WECHAT_ENTERPRISE:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/wechat_enterprise/callback
      agent-id: 1000002
    TAOBAO:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/taobao/callback
    GOOGLE:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/google/callback
    FACEBOOK:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/facebook/callback
    DOUYIN:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/douyin/callback
    LINKEDIN:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/linkedin/callback
    MICROSOFT:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/microsoft/callback
    MI:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/mi/callback
    TOUTIAO:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/toutiao/callback
    TEAMBITION:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/teambition/callback
    RENREN:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/renren/callback
    PINTEREST:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/pinterest/callback
    STACK_OVERFLOW:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/stack_overflow/callback
      stack-overflow-key: asd*********asd
    HUAWEI:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/huawei/callback
    KUJIALE:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/kujiale/callback
    GITLAB:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/gitlab/callback
    MEITUAN:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/meituan/callback
    ELEME:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/eleme/callback
    TWITTER:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/twitter/callback
    XMLY:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/xmly/callback
      # 设备唯一标识ID
      device-id: xxxxxxxxxxxxxx
      # 客户端操作系统类型，1-iOS系统，2-Android系统，3-Web
      client-os-type: 3
      # 客户端包名，如果 clientOsType 为1或2时必填。对Android客户端是包名，对IOS客户端是Bundle ID
      #pack-id: xxxx
    FEISHU:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/feishu/callback
    JD:
      client-id: 10**********6
      client-secret: 1f7d08**********5b7**********29e
      redirect-uri: http://oauth.xkcoding.com/demo/oauth/jd/callback
  cache:
    type: redis
    # 缓存前缀，目前只对redis缓存生效，默认 JUSTAUTH::STATE::
    prefix: ''
    # 超时时长，目前只对redis缓存生效，默认3分钟
    timeout: 1h
  #extend:
  #  enum-class: com.xkcoding.justauthspringbootstarterdemo.extend.ExtendSource
  #  config:
  #    TEST:
  #      request-class: com.xkcoding.justauthspringbootstarterdemo.extend.ExtendTestRequest
  #      client-id: xxxxxx
  #      client-secret: xxxxxxxx
  #      redirect-uri: http://oauth.xkcoding.com/demo/oauth/test/callback
  #当项目中使用了自定义的第三方登录，并且需要使用代理时，也要在 http-config 节点下添加相关配置
  http-config:
    timeout: 30000
    proxy:
      GOOGLE:
        type: HTTP
        hostname: 127.0.0.1
        port: 10080
