server:
  port: 33339
  shutdown: graceful
  http2:
    enabled: true
  undertow:
    buffer-size: 4096
    direct-buffers: true
    threads:
      io: 32
      worker: 256
    accesslog:
      dir: ${user.home}/logs/${spring.application.name}/undertow
      enabled: true
  servlet:
    application-display-name: ${spring.application.name}
    #context-path: sys

decorator:
  datasource:
    enabled: true
    datasource-proxy:
      logging: slf4j
      query:
        enable-logging: true
        log-level: debug
        logger-name: net.ttddyy.dsproxy.listener.logging.SLF4JQueryLoggingListener
      slow-query:
        enable-logging: true
        log-level: warn
        logger-name: net.ttddyy.dsproxy.listener.logging.SLF4JQueryLoggingListener
        threshold: 300
      multiline: true
      json-format: false
      count-query: false

jasypt:
  encryptor:
    password: ${TAOTAO_CLOUD_ENCRYPTOR_PASSWORD:taotao-cloud}     # 指定加密密钥，生产环境请放到启动参数里面  -Djasypt.encryptor.password=your-secret
    algorithm: PBEWITHHMACSHA512ANDAES_256     # 指定解密算法，需要和加密时使用的算法一致
    iv-generator-classname: org.jasypt.iv.NoIvGenerator     # 指定initialization vector类型
    property:
      prefix: "ENC@["
      suffix: "]"

redisson:
  client-name: ${spring.application.name}   #在Redis节点里显示的客户端名称。
  #password: taotao-cloud   #用于节点身份验证的密码
  lock-model: auto   #锁的模式.如果不设置, REENTRANT(可重入锁),FAIR(公平锁),MULTIPLE(联锁),REDLOCK(红锁),READ(读锁), WRITE(写锁)
  model: single   #集群模式:SINGLE(单例),SENTINEL(哨兵),MASTERSLAVE(主从),CLUSTER(集群),REPLICATED(云托管)
  codec: "com.zengtengpeng.codec.MyJsonJacksonCodec"   #Redisson的对象编码类是用于将对象进行序列化和反序列化，以实现对该对象在Redis里的读取和存储
  threads: 16   #这个线程池数量被所有RTopic对象监听器，RRemoteService调用者和RExecutorService任务共同共享。
  netty_threads: 32   #这个线程池数量是在一个Redisson实例内，被其创建的所有分布式数据类型和服务，以及底层客户端所一同共享的线程池里保存的线程数量。
  transport_mode: nio   #TransportMode.NIO,TransportMode.EPOLL - 需要依赖里有netty-transport-native-epoll包（Linux） TransportMode.KQUEUE - 需要依赖里有 netty-transport-native-kqueue包（macOS）
  idle-connection-timeout: 1000   #如果当前连接池里的连接数量超过了最小空闲连接数，而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉。时间单位是毫秒
  connect-timeout: 1000   #同任何节点建立连接时的等待超时。时间单位是毫秒
  timeout: 3000   #等待节点回复命令的时间。该时间从命令发送成功时开始计时。
  retry-attempts: 3   #如果尝试达到 retryAttempts（命令失败重试次数） 仍然不能将命令发送至某个指定的节点时，将抛出错误。如果尝试在此限制之内发送成功，则开始启用 timeout（命令等待超时） 计时。
  retry-interval: 1500   #在一条命令发送失败以后，等待重试发送的时间间隔。时间单位是毫秒。
  subscriptions-per-connection: 5   #	每个连接的最大订阅数量。
  ssl-enable-endpoint-identification: true   #开启SSL终端识别能力。
  ssl-provider: jdk   #确定采用哪种方式（JDK或OPENSSL）来实现SSL连接。
  ssl-truststore:
  ssl-truststore-password:
  ssl-keystore:
  ssl-keystore-password:
  lock-watchdog-timeout: 30000   #监控锁的看门狗超时时间单位为毫秒。该参数只适用于分布式锁的加锁请求中未明确使用leaseTimeout参数的情况。如果该看门口未使用lockWatchdogTimeout去重新调整一个分布式锁的lockWatchdogTimeout超时，那么这个锁将变为失效状态。这个参数可以用来避免由Redisson客户端节点宕机或其他原因造成死锁的情况。
  keep-pub-sub-order: true   #通过该参数来修改是否按订阅发布消息的接收顺序出来消息，如果选否将对消息实行并行处理，该参数只适用于订阅发布消息的情况。
  ping-connection-interval: 30000
  keep-alive: false
  tcpNoDelay: false
  referenceEnabled: true
  useScriptCache: false
  minCleanUpDelay: 5
  maxCleanUpDelay: 1800
  attemptTimeout: 10000   #等待获取锁超时时间,-1则是一直等待
  dataValidTime: 1800000
  single_server_config:
    address: "192.168.10.220:6379"     #服务器地址,必填ip:port
    subscription_connection_minimum_idle_size: 1     #用于发布和订阅连接的最小保持连接数（长连接）。Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。
    subscription_connection_pool_size: 50     #用于发布和订阅连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
    connection_minimum_idle_size: 24     #最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
    connection_pool_size: 64     #连接池最大容量。连接池的连接数量自动弹性伸缩。
    database: 3     #尝试连接的数据库编号。
    dns_monitoring_interval: 5000     #用来指定检查节点DNS变化的时间间隔。使用的时候应该确保JVM里的DNS数据的缓存时间保持在足够低的范围才有意义。用-1来禁用该功能。
  #multiple-server-config:
  #  #在多Redis服务节点的环境里，可以选用以下几种负载均衡方式选择一个节点：
  #  #org.redisson.connection.balancer.WeightedRoundRobinBalancer - 权重轮询调度算法
  #  #org.redisson.connection.balancer.RoundRobinLoadBalancer - 轮询调度算法
  #  #org.redisson.connection.balancer.RandomLoadBalancer - 随机调度算法
  #  loadBalancer: "org.redisson.connection.balancer.RoundRobinLoadBalancer"
  #  #多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时读取反映速度。
  #  slaveConnectionMinimumIdleSize: 32
  #  #多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
  #  slaveConnectionPoolSize: 64
  #  failedSlaveReconnectionInterval: 3000
  #  failedSlaveCheckInterval: 180000
  #  #多节点的环境里，每个 主节点的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
  #  masterConnectionMinimumIdleSize: 32
  #  #多主节点的环境里，每个 主节点的连接池最大容量。连接池的连接数量自动弹性伸缩。
  #  masterConnectionPoolSize: 64
  #  #设置读取操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里读取。 MASTER - 只在主服务节点里读取。 MASTER_SLAVE - 在主从服务节点里都可以读取。
  #  readMode: slave
  #  #设置订阅操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里订阅。 MASTER - 只在主服务节点里订阅。
  #  subscriptionMode: slave
  #  #用于发布和订阅连接的最小保持连接数（长连接）。Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。 redisson.multiple-server-config.subscriptionConnectionPoolSize
  #  subscriptionConnectionMinimumIdleSize: 1
  #  subscriptionConnectionPoolSize: 50
  #  #监测DNS的变化情况的时间间隔。
  #  dnsMonitoringInterval: 5000
  #  #服务器节点地址.必填
  #  #redisson.multiple-server-config.node-addresses[0]=127.0.0.1:6379
  #  #redisson.multiple-server-config.node-addresses[1]=127.0.0.1:6380
  #  #redisson.multiple-server-config.node-addresses[2]=127.0.0.1:6381
  #  nodeAddresses:
  #    - "192.168.10.220:6381"
  #    - "192.168.10.220:6382"
  #    - "192.168.10.220:6383"
  #    - "192.168.10.220:6384"
  #    - "192.168.10.220:6385"
  #    - "192.168.10.220:6386"
  #  #(哨兵模式,云托管,主从模式特有)尝试连接的数据库编号。
  #  database: 1
  #  #(哨兵模式特有)主服务器的名称是哨兵进程中用来监测主从服务切换情况的。
  #  masterName:
  #  #(集群,哨兵,云托管模特特有) 对Redis集群节点状态扫描的时间间隔。单位是毫秒。
  #  scanInterval: 1000

arthas:
  # telnetPort、httpPort为 -1 ，则不listen telnet端口，为 0 ，则随机telnet端口
  # 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。
  # ~/logs/arthas/arthas.log (用户目录下面)里可以找到具体端口日志
  telnetPort: -1
  httpPort: -1
  ip: 0.0.0.0   # 127.0.0.1只能本地访问，0.0.0.0则可网络访问，但是存在安全问题
  agent-id: ${spring.application.name}
  app-name: ${spring.application.name}
  tunnel-server: ws://192.168.10.220:7777/ws

dubbo:
  enabled: true
  scan:
    base-packages: com.taotao.cloud.file.biz.service.dubbo
  application:
    name: ${spring.application.name}     #当前应用名称
    compiler: javassist     #Java字节码编译器，用于动态类的生成，可选：jdk或javassist
    version: ${ttcVersion}
    owner: 981376577
    architecture: china
    organization: taotao-cloud
    metadata-type: local
    environment: develop
    qos-port: 20880     #禁用qos同一台集群可能会有端口冲突现象
    qos-enable: false
    qos-accept-foreign-ip: true
    logger: slf4j
    shutwait: 3000
    dump-directory: ${user.home}/logs/${spring.application.name}/dubbo/
  registry:
    address: nacos://192.168.10.220:8848
    group: DUBBO_REGISTRY_GROUP
    cluster: CQ
    parameters:
      namespace: taotao-cloud-dubbo
      cluster-name: CQ
    timeout: 15000
    username: nacos
    password: nacos
    protocol: dubbo
    version: ${ttcVersion}
    check: false
    register: true
    weight: 10
    subscribe: true
    use-as-config-center: false
    use-as-metadata-center: false
  protocol:
    name: dubbo
    port: 20883
    ssl-enabled: false
    accesslog: ${user.home}/logs/${spring.application.name}/dubbo/access.log
    #serialization: kryo
    status: server
    payload: 83886080
    threadpool: fixed
    threadname: taotao-cloud-file-dubbo-protocol-executor
    threads: 200
  provider:
    timeout: 3000
    version: ${ttcVersion}
    threads: 500
    group: taotao-cloud-file-dev
    #delay: 3000     #延时注册服务（毫秒）
    protocol: dubbo
    retries: 3
    loadbalance: shortestresponse
    async: true
    accesslog: ${user.home}/logs/${spring.application.name}/dubbo/provider.log
    owner: 981376577
    threadpool: fixed
    threadname: taotao-cloud-file-dubbo-provider-executor
  consumer:
    check: false
    timeout: 3000
    loadbalance: shortestresponse
    version: ${ttcVersion}
    threads: 100
    retries: 3
    async: true
    connections: 200
    owner: 981376577
    actives: 10
    cluster: failover
    validation: true
    protocol: dubbo
    group: taotao-cloud-dev
  module:
    name: ${spring.application.name}
    version: ${ttcVersion}
    owner: 981376577
    organization: taotao-cloud
    background: false
    refer-async: true
    export-async: true
  monitor:
    id: ${spring.application.name}
    address: 192.168.10.220:18080
    username: admin
    password: 123456
    group: taotao-cloud-dev
    version: ${ttcVersion}
  metadata-report:
    id: ${spring.application.name}
    address: nacos://192.168.10.220:8848
    username: nacos
    password: nacos
    group: DUBBO_REGISTRY_GROUP
    parameters:
      namespace: taotao-cloud-dubbo
      cluster-name: CQ
  config-center:
    id: ${spring.application.name}
    address: nacos://192.168.10.220:8848
    username: nacos
    password: nacos
    group: DUBBO_REGISTRY_GROUP
    parameters:
      namespace: taotao-cloud-dubbo
    check: false
  metrics:
    default: true
    id: ${spring.application.name}
    port: 9091
    enable-jvm-metrics: true
    protocol: prometheus
    aggregation:
      enabled: true
      bucketNum: 100
      timeWindowSeconds: 30
    prometheus:
      exporter:
        enabled: true
        enableHttpServiceDiscovery: true
        metricsPort: 18081
        metricsPath: /test
      pushgateway:
        enabled: false

seata:
  enabled: true
  application-id: ${spring.application.name}
  tx-service-group: taotao_cloud_tx_group   # 事务群组（可以每个应用独立取名，也可以使用相同的名字）
  enable-auto-data-source-proxy: true
  use-jdk-proxy: false
  data-source-proxy-mode: AT
  service:
    grouplist:
      SC: 192.168.10.220:8091
    vgroupMapping:
      taotao_cloud_tx_group: SC   # TC 集群（必须与seata-server保持一致）
    enable-degrade: false     # 降级开关
    disable-global-transaction: false     # 禁用全局事务（默认false）
  config:
    type: nacos
    nacos:
      namespace: taotao-cloud-seata
      server-addr: 192.168.10.220:8848
      group: SEATA_GROUP
      username: nacos
      password: nacos
      data-id: seataServer.properties
  registry:
    type: nacos
    nacos:
      namespace: taotao-cloud-seata
      application: seata-server
      server-addr: 192.168.10.220:8848
      group: SEATA_GROUP
      username: nacos
      password: nacos
      cluster: CQ
  client:
    rm:
      async-commit-buffer-limit: 10000       # 异步提交缓存队列长度（默认10000）
      report-retry-count: 5       # 一阶段结果上报TC重试次数（默认5）
      table-meta-check-enable: false       # 自动刷新缓存中的表结构（默认false）
      report-success-enable: true
      saga-branch-register-enable: false
      lock:
        retry-interval: 10         # 校验或占用全局锁重试间隔（默认10ms）
        retry-times: 30         # 校验或占用全局锁重试次数（默认30）
        retry-policy-branch-rollback-on-conflict: true         # 分支事务与其它全局回滚事务冲突时锁策略（优先释放本地锁让回滚成功）
    tm:
      commit-retry-count: 5       # 一阶段全局提交结果上报TC重试次数（默认1次，建议大于1）
      rollback-retry-count: 5       # 一阶段全局回滚结果上报TC重试次数（默认1次，建议大于1）
      degrade-check: false
      degrade-check-period: 2000
      degrade-check-allow-times: 10
    undo:
      data-validation: true       # 二阶段回滚镜像校验（默认true开启）
      log-serialization: jackson       # undo序列化方式（默认jackson 不支持 LocalDateTime）
      only-care-update-columns: true
      log-table: undo_log       # 自定义undo表名（默认undo_log）
  log:
    exception-rate: 100     # 日志异常输出概率（默认100）
  transport:
    shutdown:
      wait: 3
    thread-factory:
      boss-thread-prefix: TaoTaoCloudFileNettyBoss
      worker-thread-prefix: TaoTaoCloudFileNettyServerNIOWorker
      server-executor-thread-prefix: TaoTaoCloudFileNettyServerBizHandler
      share-boss-worker: false
      client-selector-thread-prefix: TaoTaoCloudFileNettyClientSelector
      client-selector-thread-size: 1
      client-worker-thread-prefix: TaoTaoCloudFileNettyClientWorkerThread
    type: TCP
    server: NIO
    heartbeat: true
    serialization: seata
    compressor: none
    enable-client-batch-send-request: true     # 客户端事务消息请求是否批量合并发送（默认true）

spring:
  file-storage: #文件存储配置，不使用的情况下可以不写
    default-platform: minio #默认使用的存储平台
    thumbnail-suffix: ".min.jpg" #缩略图后缀，例如【.min.jpg】【.png】
    minio: # MinIO，由于 MinIO SDK 支持 AWS S3，其它兼容 AWS S3 协议的存储平台也都可配置在这里
      - platform: minio # 存储平台标识
        enable-storage: true  # 启用存储
        access-key: xxx
        secret-key: xxx
        end-point: xxx
        bucket-name: xxx
        domain: xx/ # 访问域名，注意“/”结尾，例如：http://minio.abc.com/abc/
        base-path: hy/ # 基础路径
  config:
    activate:
      on-profile: dev
  #autoconfigure:
  #  exclude:
  #    - org.springframework.boot.actuate.autoconfigure.elasticsearch.ElasticSearchReactiveHealthContributorAutoConfiguration
  lifecycle:
    timeout-per-shutdown-phase: 30s
  thymeleaf:
    mode: HTML
    prefix: classpath:/static/
    suffix: .html
    encoding: UTF-8
    cache: false
    enabled: true
  main:
    allow-circular-references: true
    allow-bean-definition-overriding: true
    banner-mode: off
    register-shutdown-hook: true
    cloud-platform: kubernetes
    web-application-type: servlet
  application:
    name: taotao-cloud-file
    admin:
      enabled: true
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  web:
    resources:
      # pro环境关闭
      add-mappings: true
  mvc:
    servlet:
      load-on-startup: 1
    format:
      date-time: yyyy-MM-dd HH:mm:ss
      date: yyyy-MM-dd
      time: HH:mm:ss
    dispatch-trace-request: true
    dispatch-options-request: true
    log-request-details: true
    log-resolved-exception: true
  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2KB
      max-file-size: 200MB
      max-request-size: 200MB
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    #url: jdbc:mysql://192.168.10.220:13306/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&rewriteBatchedStatements=true&zeroDateTimeBehavior=convertToNull&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowMultiQueries=true&autoReconnect=true&queryInterceptors=brave.mysql8.TracingQueryInterceptor&exceptionInterceptors=brave.mysql8.TracingExceptionInterceptor
    #driver-class-name: com.mysql.cj.jdbc.Driver
    #url: jdbc:p6spy:mysql://192.168.10.220:13306/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&rewriteBatchedStatements=true&zeroDateTimeBehavior=convertToNull&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowMultiQueries=true&autoReconnect=true&rewriteBatchedStatements=true
    #driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    url: jdbc:mysql://192.168.10.220:3306/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&rewriteBatchedStatements=true&zeroDateTimeBehavior=convertToNull&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowMultiQueries=true&autoReconnect=true&useCursorFetch=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: 123456
    hikari:
      auto-commit: true # 从池返回的连接的默认自动提交行为 默认true
      connection-timeout: 350000 # 客户端等待连接池的最大毫秒数
      idle-timeout: 180000 # 允许连接在连接池中空闲的最大时间（毫秒）
      login-timeout: 5
      validation-timeout: 3000   # 连接测试活动的最大时间量
      max-lifetime: 1800000  # 池中关闭连接后的最长生命周期
      read-only: false
      connection-test-query: SELECT 1
      maximum-pool-size: 200
      minimum-idle: 10
      pool-name: DatebookHikariCP
      register-mbeans: true
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
    dynamic:
      enabled: false
  jpa:
    database: mysql
    database-platform: mysql
    show-sql: true
    open-in-view: true
    generate-ddl: true
    hibernate:
      ddl-auto: update
      naming:
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    #properties:
    #  hibernate:
    #    format_sql: true
    #    hbm2ddl.auto: update
    #    dialect: org.hibernate.dialect.MySQL8Dialect
    #properties:
    #  javax:
    #    persistence:
    #      sharedCache:
    #        mode: ENABLE_SELECTIVE
    #  hibernate:
    #    dialect: mysql
    #    format_sql: false
    #    show_sql: false
    #    generate_statistics: false
    #    cache:
    #      use_query_cache: true
    #      use_second_level_cache: true
    #      region:
    #        factory_class: 二级缓存class
    #    javax:
    #      cache:
    #        missing_cache_strategy: create
    #    temp:
    #      use_jdbc_metadata_defaults: false
  data:
    redis:
      host: 192.168.10.220
      port: 6379
      database: 1
      #password: ${TAOTAO_CLOUD_REDIS_PASSWORD:taotao-cloud}
      connect-timeout: 60000
      #sentinel:
      #  master:
      #  nodes:
      #cluster:
      #  nodes: 192.168.10.220:6381,192.168.10.220:6382,192.168.10.220:6383,192.168.10.220:6384,192.168.10.220:6385,192.168.10.220:6386
      #  max-redirects: 3
      client-type: lettuce
      lettuce:
        pool:
          max-active: 1500
          max-wait: 60000
          max-idle: 500
          min-idle: 100
      redisson:
        config: |
          singleServerConfig:
            # 连接空闲超时，单位：毫秒
            idleConnectionTimeout: 10000
            # 连接超时，单位：毫秒
            connectTimeout: 10000
            # 命令等待超时，单位：毫秒
            timeout: 3000
            # 命令失败重试次数,如果尝试达到 retryAttempts（命令失败重试次数） 仍然不能将命令发送至某个指定的节点时，将抛出错误。
            # 如果尝试在此限制之内发送成功，则开始启用 timeout（命令等待超时） 计时。
            retryAttempts: 3
            # 命令重试发送时间间隔，单位：毫秒
            retryInterval: 1500
            # 密码，没有设置密码时，需要注释掉，否则会报错
            password: taotao-cloud
            # 单个连接最大订阅数量
            subscriptionsPerConnection: 5
            # 客户端名称
            clientName: "taotao-cloud-redis-client"
            # 节点地址
            address: "redis://192.168.10.220:6379"
            # 发布和订阅连接的最小空闲连接数
            subscriptionConnectionMinimumIdleSize: 1
            # 发布和订阅连接池大小
            subscriptionConnectionPoolSize: 50
            # 最小空闲连接数
            connectionMinimumIdleSize: 32
            # 连接池大小
            connectionPoolSize: 64
            # 数据库编号
            database: 1
            # DNS监测时间间隔，单位：毫秒
            dnsMonitoringInterval: 5000
          # 线程池数量,默认值: 当前处理核数量 * 2
          threads: 0
          # Netty线程池数量,默认值: 当前处理核数量 * 2
          nettyThreads: 0
          # 编码
          codec: !<org.redisson.codec.JsonJacksonCodec> {}
          # 传输模式
          transportMode : "NIO"
          # 配置看门狗的默认超时时间为30s，这里改为 10s
          lockWatchdogTimeout: 10000
  kafka:
    enabled: true
    bootstrap-servers: 192.168.10.220:9092
    producer:
      retries: 1
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: 0
      compression-type: gzip
      properties:
        linger.ms: 100
        partitioner.class: org.apache.kafka.clients.producer.RoundRobinPartitioner
    consumer:
      auto-commit-interval: 1S
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      concurrency: 5
      ack-mode: manual_immediate
      missing-topics-fatal: false
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${herodotus.endpoint.issuer-uri}
          #jwk-set-uri: ${herodotus.endpoint.jwk-set-uri}
          jwk-set-uri: http://192.168.10.45:33336/oauth2/jwks
        opaquetoken:
          client-id: 14a9cf797931430896ad13a6b1855611
          client-secret: 14a9cf797931430896ad13a6b1855611asdfasfd
          introspection-uri: http://192.168.10.220
  cloud:
    openfeign:
      circuitbreaker: #如果 Spring Cloud CircuitBreaker 在 classpath 上，并且feign.circuitbreaker.enabled=true Feign 将使用断路器包装所有方法。
        enabled: false
      micrometer: #Feign 指标 MicrometerCapability则会创建并注册一个bean，以便您的 Feign 客户端将指标发布到 Micrometer
        enabled: true
      lazy-attributes-resolution: true
      okhttp:
        enabled: true
      httpclient:
        enabled: false
        max-connections: 1000
        max-connections-per-route: 100
      client:
        refresh-enabled: false #@RefreshScope支持
        config:
          default:
            connectTimeout: 30000 #防止由于服务器处理时间长而阻塞调用者
            readTimeout: 30000 #从连接建立时开始应用，在返回响应时间过长时触发。
          #feignName:
          #  connectTimeout: 30000
          #  readTimeout: 30000
      compression: #Feign 请求/响应压缩
        request:
          enabled: true
          mime-types: text/xml,application/xml,application/json
          min-request-size: 2048
        response:
          enabled: true
      autoconfiguration: #您可以考虑启用 Jackson Modules 来支持org.springframework.data.domain.Page和org.springframework.data.domain.Sort解码。
        jackson:
          enabled: true
    compatibility-verifier:
      enabled: false
    loadbalancer:
      #nacos:
      #  enabled: trueerfffffffffffffffffffffr
      enabled: true

art:
  xss:
    enable: false
    ignore-urls:
      - /file/common/application

taotao:
  cloud:
    sensitive:
      enabled: true
    lock:
      enabled: true
      type: redis
    limit:
      enabled: true
    idgenerator:
      enabled: true
      type: redis
    idempotent:
      enabled: true
    retry:
      enabled: true
    xss:
      enabled: false
      ignore-paths:
        - /file/common/application
    sign:
      enabled: true
    web:
      request:
        enabled: true
        types:
          - redis
          - logger
          - kafka
      interceptor:
        doubt-api: true
        header: true
      filter:
        version: true
        tenant: true
        trace: true
        web-context: true
        report: true
        ping: true
      global-exception:
        enabled: true
        types:
          - DING_TALK
          - LOGGER
          - MAIL
        receive-emails:
          - 981376577@qq.com
    alibaba:
      nacos:
        enabled: true
      sentinel:
        enabled: true
      seata:
        enabled: true
    cache:
      caffeine:
        enabled: false
      redis:
        enabled: true
        cache-manager:
          enabled: true
          type: redis
    data:
      elasticsearch:
        enabled: true
      mybatis-plus:
        enabled: true
        dynamic:
          enabled: false
        auto-fill:
          enabled: true
          enable-insert-fill: true
          enable-update-fill: true
        interceptor:
          enabled: true
          pagination:
            enabled: true
            db-type: mysql
            max-limit: 1000
            optimize-join: true
            overflow: true
          block-attack:
            enabled: true
          illegal-sql:
            enabled: true
          optimistic-locker:
            enabled: true
          data-scope:
            enabled: true
          multi-tenant:
            enabled: false
          sql-log:
            enabled: true
          sql-collector:
            enabled: true
          field-encrypt:
            enabled: true
          data-operate:
            enabled: true
          slow-query:
            enabled: true
            slow-sql-threshold-ms: 6000
          big-result-query:
            enabled: true
            size: 1000
      jpa:
        enabled: true
        packages: com.taotao.cloud.file.biz.model.entity
        tenant:
          enabled: false
      p6spy:
        enabled: true
        dateformat: yyyy-MM-dd HH:mm:ss
        driverlist: com.mysql.cj.jdbc.Driver
        database-dialect-date-format: yyyy-MM-dd HH:mm:ss
        appender: com.taotao.cloud.data.p6spy.logger.KafkaLogger
        logfile: ${user.home}/logs/${spring.application.name}/p6spy/p6spy.log
        remoteServiceName: p6spy-${spring.application.name}
    springdoc:
      enabled: true
      group: ${spring.applicaion.name}
      version: ${ttcVersion}
      title: 系统管理模块
    metrics:
      enabled: true
      druid:
        enabled: false
      sentinel:
        enabled: true
      undertow:
        enabled: true
    logger:
      enabled: true
      logging:
        console:
          enabled: true
        files:
          enabled: true
          use-json-format: false
    laytpl:
      enabled: true
    ip2region:
      enabled: true
    monitor:
      enabled: true
      dump:
        enabled: true
      export:
        enabled: true
      ping:
        enabled: true
      warn:
        enabled: true
    feign:
      enabled: true
      loadbalancer:
        enabled: true
    encrypt:
      enabled: false
      filter:
        enabled: false
    elk:
      enabled: false
    dubbo:
      enabled: true
    core:
      enabled: true
    captcha:
      enabled: false
    mail:
      enabled: false
    websocket:
      enabled: true
      netty:
        enabled: true
    security:
      ignore-url:
        - /file/**
    oss:
      enabled: true
      type: minio
      minio:
        url: xxx
        access-key: xxx
        secret-key: xxx
        bucket-name: xtest
      miniooss:
        endpoint: xxxxxx
        access-key: xxxx
        secret-key: xxxx
        bucket-name: xstest
        #base-path: taotao-cloud-dev
        slice-config:
          task-num: 8
          part-size: 104857600
        client-config:
          connect-timeout: 5000
        #oss-config:
        #  minio1:
        #    endpoint: https://play.min.io
        #    access-key: Q3AM3UQ867SPQQA43P2F
        #    secret-key: zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG
        #    bucket-name: asiatrip
        #    base-path: /test
        #    slice-config:
        #      task-num: 8
        #      part-size: 104857600
        #    client-config:
        #      connect-timeout: 5000

mybatis-plus-join:
  banner: true
  sub-table-logic: true

mybatis-plus:
  typeAliasesPackage: com.taotao.cloud.file.biz.model.entity  #实体扫描 多个package用户逗号或者分号分割
  mapperLocations: classpath:mapper/*.xml # mapper xml 地址
  global-config:
    banner: true # 关闭mp3.0自带的banner
    db-config:
      id-type: auto #主键类型
      table-underline: true  #驼峰下划线转换
      logic-delete-value: 1 #逻辑删除全局值 1已删除
      logic-not-delete-value: 0 #逻辑未删除全局值 0未删除
      insert-strategy: not_null  #字段策略
      update-strategy: not_null  #字段策略
      where-strategy: not_empty  #字段策略
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 日志打印参数class  org.apache.ibatis.logging.slf4j.Slf4jImpl com.taotao.cloud.data.mybatis.logging.CustomStdOutImpl
    lazyLoadingEnabled: true  #查询时，关闭关联对象即时加载以提高性能
    aggressiveLazyLoading: false  #设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指定)，不会加载关联表的所有字段，以提高性能
    multipleResultSetsEnabled: true #对于未知的SQL查询，允许返回不同的结果集以达到通用的效果
    useColumnLabel: true #允许使用列标签代替列名
    useGeneratedKeys: true #允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖
    autoMappingBehavior: FULL #给予被嵌套的resultMap以字段-属性的映射支持
    defaultExecutorType: SIMPLE #对于批量更新操作缓存SQL以提高性能
    defaultStatementTimeout: 15  #数据库超过15秒仍未响应则超时，部分语句可单独指定超时时间
    jdbcTypeForNull: NULL
    callSettersOnNulls: true  #当参数为NULL且字段列可为空的Double等类型时可直接当NULL插入
    logPrefix: "dao."  #打印sql语句
  configuration-properties:
    CONSTANT_CIPHER_TEXT: taotao-cloud


feign:
  sentinel:
    enabled: true

management:
  info:
    git:
      mode: simple
    java:
      enabled: true
    env:
      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
    health:
      show-details: ALWAYS
    shutdown:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
  health:
    mail:
      enabled: false
    elasticsearch:
      enabled: true
    rabbit:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true
  zipkin:
    tracing:
      connect-timeout: 1
      read-timeout: 10
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    enabled: true
    sampling:
      probability: 1.0
#  sleuth:
#    jdbc:
#      # 为false时 datasource-proxy-spring-boot-starter会生效 程序启动时会卡着不动
#      enabled: false
#    enabled: true
#    web:
#      client:
#        enabled: true
#      servlet:
#        enabled: true
#    sampler:
#      probability: 1.0
#      refresh:
#        enabled: true
#  zipkin:
#    enabled: true
#    base-url: http://192.168.10.220:9411/
#    discoveryClientEnabled: false
#    sender:
#      type: WEB
#    service:
#      name: ${spring.application.name}
#    compression:
#      enabled: true

logging:
  file:
    name: ${user.home}/logs/${spring.application.name}/${spring.application.name}.all.log
    path: ${user.home}/logs/${spring.application.name}/
  logback:
    rollingpolicy:
      max-file-size: 10GB
      max-history: 30
      clean-history-on-start: true
      total-size-cap: 20GB
  level:
    root: INFO
    org.apache.zookeeper.ZooKeeper: info
    com.taotao.cloud.file.api.feign: debug
    net.ttddyy.dsproxy.listener: debug
    net.ttddyy.dsproxy.listener.logging.SLF4JQueryLoggingListener: debug
    # hibernate log
    #org.hibernate.SQL: debug
    #org.hibernate.type: info
    #org.hibernate.type.descriptor.sql.BasicBinder: trace
    #org.hibernate.type.descriptor.sql.BasicExtractor: debug
    #org.hibernate.engine.QueryParameters: debug
    #org.hibernate.engine.query.HQLQueryPlan: debug
    # mybatis log
    #com.apache.ibatis: trace
    #java.sql.Connection: debug
    #java.sql.Statement: debug
    #java.sql.PreparedStatement: debug
    # kafka log
    #kafka.server.KafkaConfig: info
    #kafka.admin.AdminClient.AdminConfig: info
    #org.apache.kafka: off
    #org.I0Itec.zkclient: info
    # springframework log
    #org.springframework.cloud.openfeign: debug
    #org.springframework.web: off
    #org.springframework.security: off
    #org.springframework.security.oauth2: off
    #org.springframework.boot.autoconfigure: off
    #org.elasticsearch.client: debug

tlog:
  pattern: "$preApp:$preIp:$spanId:$traceId"
  enableInvokeTimePrint: false
  idGenerator: com.taotao.cloud.logger.tlog.TlogIdGenerator
  mdcEnable: true

pagehelper:
  helper-dialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql


springdoc:
  showActuator: false
  default-flat-param-object: true
  packages-to-exclude:
    - cn.afterturn.easypoi.wps.controller
    - com.taotao.cloud.captcha.controller
  #swagger-ui:
  #  path: /swagger-ui.html
  #  tags-sorter: alpha
  #  operations-sorter: alpha
  #api-docs:
  #  path: /v3/api-docs
  #group-configs:
  #  - group: 'default'
  #    paths-to-match: '/**'
  #    packages-to-scan: com.xiaominfo.knife4j.demo.web

knife4j:
  production: false
  enable: true
  basic:
    enable: false
    username: admin
    password: 123456
  cors: false
  documents:
    - group: 1.2.x
      name: 测试自定义标题分组
      locations: classpath:md/*
    - name: 标题2
      locations: classpath:markdown1/*
      group: 用户模块
  setting:
    swagger-model-name: 实体类列表
    enableSwaggerModels: true
    enableDocumentManage: true
    enableHost: false
    enableHostText: http://localhost:18568
    enableRequestCache: true
    enableFilterMultipartApis: false
    enableFilterMultipartApiMethodType: POST
    language: zh-CN
    enableAfterScript: false
    enableHomeCustom: true
    homeCustomLocation: classpath:test/home.md
    enableFooter: false
    enableFooterCustom: true
    footerCustomContent: 八一菜刀研究中心
    enableSearch: true
    enableDebug: true
    enableOpenApi: true
    enableGroup: true

# 设置分块信息
##单位为M
upload:
  chunkSize: 2
  threadMaxSize: 25
  queueMaxSize: 100
  queueDir: C:\\Users\\NineSun\\Desktop\\11\\

grpc:
  enabled: true
  enable-reflection: true
  shutdownGrace: 30
  port: 6565
  security:
    auth:
      enabled: false
  #netty-server:
  #  keep-alive-time: 30s
  #  max-inbound-message-size: 10MB
  #  primary-listen-address: 10.10.15.23:0
  #  additional-listen-addresses:
  #    - 192.168.0.100:6767
  #  on-collision-prefer-shaded-netty: false


herodotus:
  endpoint:
    uaa-service-name: dante-cloud-uaa
    upms-service-name: dante-cloud-upms
    gateway-service-uri: http://127.0.0.1:33336
    uaa-service-uri: http://127.0.0.1:33336/
    upms-service-uri: http://127.0.0.1:33336/${herodotus.endpoint.upms-service-name}
    access-token-uri: http://127.0.0.1:33336/oauth2/token
    authorization-uri: http://127.0.0.1:33336/oauth2/authorize
    token-revocation-uri: http://127.0.0.1:33336/oauth2/revoke
    token-introspection-uri: http://127.0.0.1:33336/oauth2/introspect
    jwk-set-uri: http://127.0.0.1:33336/oauth2/jwks
    issuer-uri: ${herodotus.endpoint.uaa-service-uri}
    oidc-client-registration-uri: http://127.0.0.1:33336/connect/register
    oidc-user-info-uri: http://127.0.0.1:33336/userinfo
  oauth2:
    authentication:
      form-login:
        category: HUTOOL_GIF
    authorization:
      validate: local
      jwk:
        certificate: standard
