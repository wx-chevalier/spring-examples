#yapi mock规则---------------------------------------
#mockjs官方示例: http://mockjs.com/examples.html
#定义一些基础的规则
#手机号
phone=1@pick(["34","35","36","37","38","39","50","5","52","58","59","57","82","87","88","70","47","30","3","32","55","56","85","86","33","53","80","89"])@string("number", 8)
#毫秒时间戳
mtimestamp=@timestamp@string("number", 3)
#0-9
digit=@natural(0,9)
#小于1000的自然数
natural_lt_1000=@natural(0,1000)
#小数点后两位
float_with_two=@natural(0,10000).@natural(0,100)
#http url
http_url=@pick(["http","https"])://www.@domain()/@string('lower',1,8)?@string('lower',2,4)=@string('number',1,2)
#objectId 只是字符和位数，不满足具体协议
objectId=@string("0123456789abcdef",24,24)

# @表示注解 #表示注释tag

# security description
find_role_in_PreAuthorize=(function(exp){var str="";if(exp.indexOf("hasRole")!=-1){var roles=exp.match(/hasRole\\((.*?)\\)/);if(roles&&roles.length>1){str+="need role:"+roles[1];}};return str})
doc.method[@jakarta.annotation.security.RolesAllowed]=groovy:"\n需要角色:"+it.ann("jakarta.annotation.security.RolesAllowed")
doc.method[@org.springframework.security.access.prepost.PreAuthorize]=js:${find_role_in_PreAuthorize}(it.ann("org.springframework.security.access.prepost.PreAuthorize"))

#yapi tag
api.tag[#public]=public
api.tag[groovy:it.containingClass().hasDoc("public")]=public

mdoc.class.filter=groovy:it.name().endsWith("Client")
#mdoc.method.path=groovy:it.containingClass().name()+"/"+it.name()
mdoc.method.http.method[groovy:it.argCnt()==0]=GET

#为dubbo打tag
api.tag=groovy:it.containingClass().name().endsWith("Client")?"dubbo":null

json.rule.enum.convert[com.itangcent.common.constant.UserType]=~#type

# 过滤接口自定义参数
param.ignore=groovy:it.type().name()=="com.itangcent.springboot.demo.UserContent"
param.ignore=@com.itangcent.springboot.demo.UserContext
param.ignore[@org.springframework.web.bind.annotation.RequestHeader]=groovy:it.ann("org.springframework.web.bind.annotation.RequestHeader","value") == "token"
param.ignore[@org.springframework.web.bind.annotation.RequestHeader]=groovy:it.ann("org.springframework.web.bind.annotation.RequestHeader","name") == "token"


#json.rule.field.ignore=js:it.name()=="logger"
#json.rule.field.ignore=logger
#json.rule.field.ignore=js:it.type().name()=="java.util.logging.Logger"

markdown.render.server=http://www.itangcent.com/render

#swagger
doc.param=@io.swagger.annotations.ApiParam#value
param.default.value=@io.swagger.annotations.ApiParam#defaultValue
param.required=@io.swagger.annotations.ApiParam#required
doc.class=@io.swagger.annotations.Api#value
doc.method=@io.swagger.annotations.ApiOperation#value
doc.field=@io.swagger.annotations.ApiModelProperty#value
api.tag=@io.swagger.annotations.ApiOperation#tags

# 额外要求header中携带token
method.additional.header[!@com.itangcent.common.annotation.Public]={name: "token",value: "",desc: "认证Token",required:true, example:""}
method.additional.header[!@com.itangcent.common.annotation.Public]={name: "token",value: "",desc: "认证Token",required:true}
#method.additional.header[groovy:!it.hasAnn("com.itangcent.common.annotation.Public")]={name: "token",value: "",desc: "认证Token",required:true, example:""}
#method.additional.header={name: "token",value: "",desc: "认证Token",required:true, example:""}
#class.prefix.path=/ppppp

method.return.main[groovy:it.returnType().isExtend("com.itangcent.common.dto.Result")]=data

#method.default.http.method=POST

field.mock.resolveProperty=false

java.to.js.type=(function(type){type = type.replace("java.lang.","");return type.replace(type[0],type[0].toLowerCase());})
doc.param=js:"类型:"+${java.to.js.type}(it.type().name())
# doc.param=js:"类型:"+it.type().name()

number_min=-888888888
number_max=88888888
float_dmin=6


# 解析ApiImplicitParam的参数
resolve_api_implicit_param=```
    def desc = map.value
    def allowableValues = map.allowableValues
    if(tool.notNullOrBlank(allowableValues)){
        desc = desc + "\n允许的值:" + allowableValues
    }

    def paramType = map.paramType ?: "query"
    def required = map.required?:true
    if(paramType==""||paramType=="query"){
        api.setParam(map.name,map.defaultValue,required,desc)
    }else if(paramType=="form"){
        api.setFormParam(map.name,map.defaultValue,required,desc)
    }else if(paramType=="path"){
        api.setPathParam(map.name,map.defaultValue,desc)
    }else if(paramType=="header"){
        api.setHeader(map.name,map.defaultValue,required,desc)
    }
```

# 解析ApiImplicitParam
export.after[@io.swagger.annotations.ApiImplicitParam]=groovy:```
    def map = it.annMap("io.swagger.annotations.ApiImplicitParam")
    ${resolve_api_implicit_param}
```

# 解析ApiImplicitParams
export.after[@io.swagger.annotations.ApiImplicitParams]=groovy:```
    def maps = it.annMap("io.swagger.annotations.ApiImplicitParams")
    for(map in maps.value){
        ${resolve_api_implicit_param}
    }
```


# 解析ApiResponse的参数到api描述中
resolve_api_response=```
    def desc = "\\n\\n***响应码***:"+map.code+"\\n\\n"
    desc += map.message+"\\n\\n"
    def response = map.response
    if(response!=null){
        def responseClass = helper.findClass(response)
        if(responseClass!=null){
            desc += "响应内容:\\n```json\\n" + responseClass.toJson(true) + "\\n```\\n"
        }
    }
    api.appendDesc(desc)
```


# 解析ApiResponse到api描述中
export.after[@io.swagger.annotations.ApiResponse]=groovy:```
    def map = it.annMap("io.swagger.annotations.ApiResponse")
    ${resolve_api_response}
```

# 解析ApiResponses到api描述中
export.after[@io.swagger.annotations.ApiResponses]=groovy:```
    def maps = it.annMap("io.swagger.annotations.ApiResponses")
    for(map in maps.value){
        ${resolve_api_response}
    }
```


# 解析单个ApiResponse到已有的Response中
export.after[@io.swagger.annotations.ApiResponse]=groovy:```
    def map = it.annMap("io.swagger.annotations.ApiResponse")

    api.setResponseCode(map.code?:200)
    api.appendResponseBodyDesc(map.message)
    def responseHeaders = map.responseHeaders
    if(responseHeaders!=null){
        for(responseHeader in responseHeaders) {
            api.setResponseHeader(responseHeader.name,"",true,responseHeader.description)
        }
    }
    def response = map.response
    if(response!=null){
        api.setResponseBodyClass(response)
    }
```

# 设置参数的接受方式 query/form/body
#param.http.type[@org.springframework.web.bind.annotation.RequestParam]=query
#param.http.type=form
# 设置api的 content-type
#method.content.type=multipart/form-data

api.tag=#tag
api.tag.delimiter=,&\n

api.open=@com.itangcent.common.annotation.Public
postman.prerequest[!@com.itangcent.common.annotation.Public]=```
var a = "1";
var b = "1";
```


# swagger
param.doc=@io.swagger.annotations.ApiParam#value
param.default.value=@io.swagger.annotations.ApiParam#defaultValue
param.required=@io.swagger.annotations.ApiParam#required
param.ignore=@io.swagger.annotations.ApiParam#hidden
class.doc=@io.swagger.annotations.Api#value
method.doc=@io.swagger.annotations.ApiOperation#value
field.doc=@io.swagger.annotations.ApiModelProperty#value
field.required=@io.swagger.annotations.ApiModelProperty#required
api.tag=@io.swagger.annotations.ApiOperation#tags
