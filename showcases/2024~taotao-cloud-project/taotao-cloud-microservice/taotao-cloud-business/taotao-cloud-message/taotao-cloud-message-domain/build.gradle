
/**
 * DDD: domain 领域层 这一层就是最为核心的业务逻辑层， 这一层不包含任何和技术相关的内容，只包含业务逻辑。
 * 领域层主要负责表达业务概念,业务状态信息和业务规则。
 * Domain层是整个系统的核心层,几乎全部的业务逻辑会在该层实现。
 * 领域模型层主要包含以下的内容:
 * 实体(Entities):具有唯一标识的对象
 * 值对象(Value Objects): 无需唯一标识的对象
 * 领域服务(Domain Services): 一些行为无法归类到实体对象或值对象上,本质是一些操作,而非事物(与本例中domain/service包下的含义不同)
 * 聚合/聚合根(Aggregates,Aggregate Roots):
 * 聚合是指一组具有内聚关系的相关对象的集合,每个聚合都有一个root和boundary
 * 工厂(Factories): 创建复杂对象,隐藏创建细节
 * 仓储(Repository): 提供查找和持久化对象的方法
 *
 * |--- domain                      -- 领域层
 * |      |--- model                -- 领域对象
 * |      |       |--- aggregate    -- 聚合
 * |      |       |--- entities     -- 实休
 * |      |       |--- vo           -- 值对象
 * |      |--- service              -- 域服务
 * |      |--- factory              -- 工厂，针对一些复杂的Object可以通过工厂来构建
 * |      |--- port                 -- 端口，即接口
 * |      |--- event                -- 领域事件
 * |      |--- exception            -- 异常封装
 * |      |--- ability              -- 领域能力
 * |      |--- extension            -- 扩展点
 * |      |       |--- impl        -- 扩展点实现
 */

/**
 * DomainService命名统一以Service为后缀。
 * Entity实体类的命名不用后缀。 值对象类的定义统一以VO结尾。
 * DomainService逻辑中可以调用Repository和Port中定义的接口。
 * DomainService可以操作多个聚合，实体和值对象。
 * Entity实体类可以有构造函数，builder，getters。 不要直接放开所有属性的setters，防止业务代码随意修改实体的属性。
 * 编写业务逻辑需要遵守原则：优先将业务逻辑放在Entity和VO中，然后才是放在聚合中，最后才放在DomainService中。
 * 依赖反转原则：Domain层依赖的外部接口都要定义在Domain模块的port包中。Domain层只面向接口编程，不依赖接口实现类。
 */

/**
 * 4.领域对象 VS 数据对象
 * 1.数据对象使用基本类型保持纯净：PlayerEntity
 * 2.领域对象需要体现业务含义：PlayerQueryResultDomain
 *
 * <p>领域对象 VS 业务对象
 * 1.数据对象使用基本类型保持纯净：PlayerEntity
 * 2.业务对象同样会体现业务 最大不同是领域对象采用充血模型聚合业务: PlayerCreateBO
 *
 * <p>领域层 VS 应用层
 * 第一个区别：领域层关注纵向，应用层关注横向。领域层纵向做隔离，本领域业务行为要在本领域内处理完。
 * 应用层横向做编排，聚合和编排领域服务。
 * 第二个区别：应用层可以更加灵活组合不同领域业务，
 * 并且可以增加流控、监控、日志、权限，分布式锁，相较于领域层功能更为丰富。
 */


dependencies {
    api "io.github.shuigedeng:taotao-cloud-starter-seata"
    api "io.github.shuigedeng:taotao-cloud-starter-sentinel"
    api "io.github.shuigedeng:taotao-cloud-starter-facility-alibaba"
    api "io.github.shuigedeng:taotao-cloud-starter-dubbo"
    api "io.github.shuigedeng:taotao-cloud-starter-eventbus"
    api "io.github.shuigedeng:taotao-cloud-starter-mq-pulsar"
    api "io.github.shuigedeng:taotao-cloud-starter-mq-rocketmq"
    api "io.github.shuigedeng:taotao-cloud-starter-mq-kafka"
    api "io.github.shuigedeng:taotao-cloud-starter-mq-stream"
    api "io.github.shuigedeng:taotao-cloud-starter-dingtalk"
    api "io.github.shuigedeng:taotao-cloud-starter-websocket"
    api "io.github.shuigedeng:taotao-cloud-starter-websocket-netty"
    api "io.github.shuigedeng:taotao-cloud-starter-sms-aliyun"
    api "io.github.shuigedeng:taotao-cloud-starter-sms-tencentv3"
    api "io.github.shuigedeng:taotao-cloud-starter-grpc"
    api "io.github.shuigedeng:taotao-cloud-starter-lock"
    api("io.github.shuigedeng:taotao-cloud-starter-web") {
        exclude group: "com.baomidou", module: "dynamic-datasource-spring-boot3-starter"
    }

    api 'org.apache.rocketmq:rocketmq-spring-boot-starter:2.3.0'
    api("com.aliyun:alibaba-dingtalk-service-sdk:2.0.0") {
        exclude group: "com.sun.jmx", module: "jmxri"
    }
    api 'com.alipay.sdk:alipay-sdk-java:4.39.74.ALL'

    api "com.github.binarywang:weixin-java-cp:4.6.2.B"
    api "com.github.binarywang:weixin-java-miniapp:4.6.2.B"
    api "com.github.binarywang:weixin-java-mp:4.6.2.B"

    api 'com.ctrip.framework.apollo:apollo-client-config-data:2.2.0'
    api 'org.dromara.dynamictp:dynamic-tp-spring-boot-starter-apollo:1.1.8-beta'

//    implementation 'org.apache.flink:flink-connector-rabbitmq:1.15.1'
//    implementation "org.apache.flink:flink-connector-kafka_2.11:3.0.1-1.18"
//    implementation "org.apache.flink:flink-clients_2.11:1.14.3"
//    implementation "org.apache.flink:flink-streaming-java_2.11:1.14.3"
//    implementation "org.apache.flink:flink-walkthrough-common_2.11:1.14.3"
    api "com.xuxueli:xxl-job-core:2.4.1"
    api 'de.siegmar:logback-gelf:6.0.0'
    api 'io.springfox:springfox-boot-starter:3.0.0'
    api 'com.sun.mail:javax.mail:1.6.2'
    api 'cn.monitor4all:log-record-springboot3-starter:1.6.3'
    api 'com.alibaba.boot:nacos-config-spring-boot-starter:0.3.0-RC'
    api 'com.tencentcloudapi:tencentcloud-sdk-java:4.0.11'
    api "com.alibaba.fastjson2:fastjson2:2.0.51"
    api 'com.squareup.okhttp3:okhttp:4.12.0'
    api 'com.google.guava:guava:33.2.1-jre'
    api 'org.dromara.hutool:hutool-all'
    api 'com.mysql:mysql-connector-j'

    //https://search.maven.org/artifact/com.github.gavlyukovskiy/datasource-proxy-spring-boot-starter
    api 'com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:1.9.1'

    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    api "com.querydsl:querydsl-jpa:5.1.0:jakarta"
    api "jakarta.persistence:jakarta.persistence-api:3.1.0"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
}
