#server:
#  port: 33333
#  shutdown: graceful
#  http2:
#    enabled: false
#  ssl:
#    enabled: false
#    key-store: classpath:cert/SHA256withRSA_taotaocloud.top.jks
#    key-store-type: JKS
#    key-store-password: 1234
#
#redisson:
#  #在Redis节点里显示的客户端名称。
#  client-name: ${spring.application.name}
#  #用于节点身份验证的密码
#  password: taotao-cloud
#  #锁的模式.如果不设置, REENTRANT(可重入锁),FAIR(公平锁),MULTIPLE(联锁),REDLOCK(红锁),READ(读锁), WRITE(写锁)
#  lock-model: auto
#  #集群模式:SINGLE(单例),SENTINEL(哨兵),MASTERSLAVE(主从),CLUSTER(集群),REPLICATED(云托管)
#  model: cluster
#  #Redisson的对象编码类是用于将对象进行序列化和反序列化，以实现对该对象在Redis里的读取和存储
#  codec: "com.zengtengpeng.codec.MyJsonJacksonCodec"
#  #这个线程池数量被所有RTopic对象监听器，RRemoteService调用者和RExecutorService任务共同共享。
#  threads: 16
#  #这个线程池数量是在一个Redisson实例内，被其创建的所有分布式数据类型和服务，以及底层客户端所一同共享的线程池里保存的线程数量。
#  netty_threads: 32
#  #TransportMode.NIO,TransportMode.EPOLL - 需要依赖里有netty-transport-native-epoll包（Linux） TransportMode.KQUEUE - 需要依赖里有 netty-transport-native-kqueue包（macOS）
#  transport_mode: nio
#  #如果当前连接池里的连接数量超过了最小空闲连接数，而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉。时间单位是毫秒
#  idleConnectionTimeout: 1000
#  #同任何节点建立连接时的等待超时。时间单位是毫秒
#  connectTimeout: 1000
#  #等待节点回复命令的时间。该时间从命令发送成功时开始计时。
#  timeout: 3000
#  #如果尝试达到 retryAttempts（命令失败重试次数） 仍然不能将命令发送至某个指定的节点时，将抛出错误。如果尝试在此限制之内发送成功，则开始启用 timeout（命令等待超时） 计时。
#  retryAttempts: 3
#  #在一条命令发送失败以后，等待重试发送的时间间隔。时间单位是毫秒。
#  retryInterval: 1500
#  #	每个连接的最大订阅数量。
#  subscriptionsPerConnection: 5
#  #开启SSL终端识别能力。
#  sslEnableEndpointIdentification: true
#  #确定采用哪种方式（JDK或OPENSSL）来实现SSL连接。
#  sslProvider: jdk
#  ssl-truststore:
#  ssl-truststore-password:
#  ssl-keystore:
#  ssl-keystore-password:
#  #监控锁的看门狗超时时间单位为毫秒。该参数只适用于分布式锁的加锁请求中未明确使用leaseTimeout参数的情况。如果该看门口未使用lockWatchdogTimeout去重新调整一个分布式锁的lockWatchdogTimeout超时，那么这个锁将变为失效状态。这个参数可以用来避免由Redisson客户端节点宕机或其他原因造成死锁的情况。
#  lockWatchdogTimeout: 30000
#  #通过该参数来修改是否按订阅发布消息的接收顺序出来消息，如果选否将对消息实行并行处理，该参数只适用于订阅发布消息的情况。
#  keepPubSubOrder: true
#  pingConnectionInterval: 30000
#  keepAlive: false
#  tcpNoDelay: false
#  referenceEnabled: true
#  useScriptCache: false
#  minCleanUpDelay: 5
#  maxCleanUpDelay: 1800
#  #等待获取锁超时时间,-1则是一直等待
#  attemptTimeout: 10000
#  dataValidTime: 1800000
#  #single_server_config:
#  #  #服务器地址,必填ip:port
#  #  address: "127.0.0.1:6379"
#  #  #用于发布和订阅连接的最小保持连接数（长连接）。Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。
#  #  subscription_connection_minimum_idle_size: 1
#  #  #用于发布和订阅连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
#  #  subscription_connection_pool_size: 50
#  #  #最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
#  #  connection_minimum_idle_size: 24
#  #  #连接池最大容量。连接池的连接数量自动弹性伸缩。
#  #  connection_pool_size: 64
#  #  #尝试连接的数据库编号。
#  #  database: 3
#  #  #用来指定检查节点DNS变化的时间间隔。使用的时候应该确保JVM里的DNS数据的缓存时间保持在足够低的范围才有意义。用-1来禁用该功能。
#  #  dns_monitoring_interval: 5000
#  multiple-server-config:
#    #在多Redis服务节点的环境里，可以选用以下几种负载均衡方式选择一个节点：
#    #org.redisson.connection.balancer.WeightedRoundRobinBalancer - 权重轮询调度算法
#    #org.redisson.connection.balancer.RoundRobinLoadBalancer - 轮询调度算法
#    #org.redisson.connection.balancer.RandomLoadBalancer - 随机调度算法
#    loadBalancer: "org.redisson.connection.balancer.RoundRobinLoadBalancer"
#    #多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时读取反映速度。
#    slaveConnectionMinimumIdleSize: 32
#    #多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
#    slaveConnectionPoolSize: 64
#    failedSlaveReconnectionInterval: 3000
#    failedSlaveCheckInterval: 180000
#    #多节点的环境里，每个 主节点的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
#    masterConnectionMinimumIdleSize: 32
#    #多主节点的环境里，每个 主节点的连接池最大容量。连接池的连接数量自动弹性伸缩。
#    masterConnectionPoolSize: 64
#    #设置读取操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里读取。 MASTER - 只在主服务节点里读取。 MASTER_SLAVE - 在主从服务节点里都可以读取。
#    readMode: slave
#    #设置订阅操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里订阅。 MASTER - 只在主服务节点里订阅。
#    subscriptionMode: slave
#    #用于发布和订阅连接的最小保持连接数（长连接）。Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。 redisson.multiple-server-config.subscriptionConnectionPoolSize
#    subscriptionConnectionMinimumIdleSize: 1
#    subscriptionConnectionPoolSize: 50
#    #监测DNS的变化情况的时间间隔。
#    dnsMonitoringInterval: 5000
#    #服务器节点地址.必填
#    #redisson.multiple-server-config.node-addresses[0]=127.0.0.1:6379
#    #redisson.multiple-server-config.node-addresses[1]=127.0.0.1:6380
#    #redisson.multiple-server-config.node-addresses[2]=127.0.0.1:6381
#    nodeAddresses:
#      - "127.0.0.1:6381"
#      - "127.0.0.1:6382"
#      - "127.0.0.1:6383"
#      - "127.0.0.1:6384"
#      - "127.0.0.1:6385"
#      - "127.0.0.1:6386"
#    #(哨兵模式,云托管,主从模式特有)尝试连接的数据库编号。
#    database: 1
#    #(哨兵模式特有)主服务器的名称是哨兵进程中用来监测主从服务切换情况的。
#    masterName:
#    #(集群,哨兵,云托管模特特有) 对Redis集群节点状态扫描的时间间隔。单位是毫秒。
#    scanInterval: 1000
#
#spring:
#  config:
#    activate:
#      on-profile: pro
#  main:
#    allow-bean-definition-overriding: true
#    web-application-type: reactive
#    banner-mode: off
#  application:
#    name: taotao-cloud-gateway
#  #security:
#  #  oauth2:
#  #    resourceserver:
#  #      jwt:
#  #        #配置RSA的公钥访问地址
#  #        #          jwk-set-uri: http://taotao-cloud-auth/oauth2/jwks
#  #        jwk-set-uri: http://127.0.0.1:9998/oauth2/jwks
#  sleuth:
#    enabled: true
#    web:
#      client:
#        enabled: true
#    sampler:
#      probability: 1.0
#  zipkin:
#    enabled: true
#    base-url: http://${TAOTAO_CLOUD_ZIPKIN_HOST:127.0.0.1}:${TAOTAO_CLOUD_ZIPKIN_PORT:9411}
#    discoveryClientEnabled: false
#    sender:
#      type: WEB
#  jackson:
#    date-format: yyyy-MM-dd HH:mm:ss
#    time-zone: GMT+8
#    serialization:
#      write-dates-as-timestamps: false
#  redis:
#    #host: ${TAOTAO_CLOUD_REDIS_HOST:127.0.0.1}
#    #port: ${TAOTAO_CLOUD_REDIS_PORT:6379}
#    #database: 1
#    password: ${TAOTAO_CLOUD_REDIS_PASSWORD:taotao-cloud}
#    connect-timeout: 60000
#    cluster:
#      nodes: 127.0.0.1:6381,127.0.0.1:6382,127.0.0.1:6383,127.0.0.1:6384,127.0.0.1:6385,127.0.0.1:6386
#      max-redirects: 3
#    #sentinel:
#    #  master:
#    #  nodes:
#    client-type: lettuce
#    lettuce:
#      pool:
#        max-active: 1500
#        max-wait: 5000
#        max-idle: 500
#        min-idle: 100
#    redisson:
#      config: |
#        clusterServersConfig:
#          idleConnectionTimeout: 10000
#          connectTimeout: 10000
#          timeout: 3000
#          retryAttempts: 3
#          retryInterval: 1500
#          failedSlaveReconnectionInterval: 3000
#          failedSlaveCheckInterval: 60000
#          password: taotao-cloud
#          subscriptionsPerConnection: 5
#          clientName: null
#          loadBalancer: !<org.redisson.connection.balancer.RoundRobinLoadBalancer> {}
#          subscriptionConnectionMinimumIdleSize: 1
#          subscriptionConnectionPoolSize: 50
#          slaveConnectionMinimumIdleSize: 24
#          slaveConnectionPoolSize: 64
#          masterConnectionMinimumIdleSize: 24
#          masterConnectionPoolSize: 64
#          readMode: "SLAVE"
#          subscriptionMode: "SLAVE"
#          nodeAddresses:
#          - "redis://127.0.0.1:6381"
#          - "redis://127.0.0.1:6382"
#          - "redis://127.0.0.1:6383"
#          - "redis://127.0.0.1:6384"
#          - "redis://127.0.0.1:6385"
#          - "redis://127.0.0.1:6386"
#          scanInterval: 1000
#          pingConnectionInterval: 0
#          keepAlive: false
#          tcpNoDelay: false
#        threads: 16
#        nettyThreads: 32
#        codec: !<org.redisson.codec.MarshallingCodec> {}
#        transportMode: "NIO"
#
#  kafka:
#    bootstrap-servers: 127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094
#    producer:
#      retries: 0
#      batch-size: 16384
#      buffer-memory: 33554432
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
#      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
#      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
#      acks: 0
#      properties:
#        linger.ms: 500
#  cloud:
#    compatibility-verifier:
#      enabled: false
#    loadbalancer:
#      enabled: true
#    sentinel:
#      app:
#        type: 1
#      enabled: true
#      eager: true
#      transport:
#        dashboard: ${TAOTAO_CLOUD_SENTINEL_TRANSPORT_DASHBOARD_HOST:127.0.0.1}:${TAOTAO_CLOUD_SENTINEL_TRANSPORT_DASHBOARD_PORT:8849}
#        port: ${TAOTAO_CLOUD_SENTINEL_TRANSPORT_PORT:8710}
#      scg:
#        fallback:
#          mode: response
#          response-status: 200
#          response-body: "{'data': null, 'code': 429,'message': '访问频繁,进入系统熔断'}"
#    gateway:
#      loadbalancer:
#        use404: false
#      discovery:
#        locator:
#          lower-case-service-id: true
#          enabled: true
